<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vorsprung durch Informatik</title><link>http://csparpa.github.io/blog/</link><description></description><atom:link href="http://csparpa.github.io/blog/feeds/rss.xml" rel="self"></atom:link><lastBuildDate>Sat, 01 Oct 2016 17:00:00 +0200</lastBuildDate><item><title>How to setup centralized logging on your Django apps using Logstash and Amazon EC2</title><link>http://csparpa.github.io/blog/2016/10/django-centralized-logging-on-ec2-with-logstash.html</link><description>&lt;p&gt;This post is a step-by-step guide on how to realize a centralized logging
solution for your Django apps.&lt;/p&gt;
&lt;p&gt;We will instrument an Amazon EC2 instance running Ubuntu 14.04 to collect logs
from a locally-running Django app through the use of the "ELK" stack, which includes
Logstash as a log aggregator, and Docker as a containerization platform.&lt;/p&gt;
&lt;h2&gt;Centralized logging&lt;/h2&gt;
&lt;p&gt;Centralized logging is a monitoring technique that allows you to view all of your
applications' log messages on a single hub that acts as a collector and as unique
storage provider for them, and also gives you some degree of "log-browsability".&lt;/p&gt;
&lt;p&gt;The centralized logging solution that we'll setup gives you the following
advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the setup is very easily and quickly reproducible&lt;/li&gt;
&lt;li&gt;logs from different hosts flow to a single collector host&lt;/li&gt;
&lt;li&gt;logs are persisted by the collector: no more need to logrotate on the hosts
    (you can always do it as a backup strategy) and fault-tolerance
    in case of complete failure of the origin hosts&lt;/li&gt;
&lt;li&gt;logs are saved almost in real-time&lt;/li&gt;
&lt;li&gt;logs are saved along with metadata that allows you to query them (eg: filter
    them by timespan, by origin host, by words in the log content, etc..)&lt;/li&gt;
&lt;li&gt;you get a nice web-based UI to browse/query the logs&lt;/li&gt;
&lt;li&gt;depending on what your log messages contain, you might be able to track down
    the full track of a high-level that gets decomposed into multiple sub-requests
    flowing through many parts of a complex system (eg: a microservices based
    architecture) with only one query. This for example can be done if you put
    correlation IDs into your requests: then you query for those IDs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And - as nothing comes completely free of charge, these are the cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the collector is a Single Point of Failure unless you provide load balancing
    for it&lt;/li&gt;
&lt;li&gt;the collector could quickly get out of disk space, depending on how many
    hosts you collect from and the logs flow rate&lt;/li&gt;
&lt;li&gt;log centralization relies on network efficiency: no network, no centralized
    logging - so you need to provide a local backup where to write your logs
    just in case.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is worth mentioning that the solution we're going to provide can be
effectively used not only to track application-level logs but also to chunk and
collect system-level logs (eg: syslog, dmesg, etc..)&lt;/p&gt;
&lt;h2&gt;Logstash&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.elastic.co/products/logstash"&gt;Logstash&lt;/a&gt; is the log aggregating
solution we're going to use. It is a daemon + command-line tool that just
accepts and stores all the log messages that you send it, but provides no way
of indexing and querying the logs. Furthermore, it comes without any graphical
user interface.&lt;/p&gt;
&lt;p&gt;So if we want to effectively leverage Logstash we need to bind it with another
solution that allows to index and query for logs and possibly another solution
that allows us to do all of this in a human-friendly fashion.&lt;/p&gt;
&lt;h2&gt;Introducing the ELK stack&lt;/h2&gt;
&lt;p&gt;"ELK" is the short of &lt;a href="https://www.elastic.co/products/elasticsearch"&gt;Elasticsearch&lt;/a&gt;,
&lt;a href="https://www.elastic.co/products/logstash"&gt;Logstash&lt;/a&gt; and &lt;a href="https://www.elastic.co/products/kibana"&gt;Kibana&lt;/a&gt;.
This application stack provides us exactly what we need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Logstash&lt;/em&gt; - collects logs from hosts, these are handed over to...&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Elasticsearch&lt;/em&gt; - indexes and stores logs, that can be seen using...&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Kibana&lt;/em&gt; - a rich web-based user interface&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Installing and configuring three different applications is too much, we'll
use a quicker solution: Docker. But first, let's setup our EC2 instance.&lt;/p&gt;
&lt;h1&gt;Steps&lt;/h1&gt;
&lt;p&gt;&lt;a name="#guide"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Setup of EC2 instance&lt;/h2&gt;
&lt;p&gt;When you setup the instance, make sure it instantiates Ubuntu 14.04 AMI and
mounts a good capacity volume (this depends on the logs frequency of course,
but I would advice at least 32 GB) and at least 2 GB of RAM (a t2.small could be
fine)&lt;/p&gt;
&lt;p&gt;Install Docker 1.9 by running the following commands as root user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;adv&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;keyserver&lt;/span&gt; &lt;span class="n"&gt;hkp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;deb https://apt.dockerproject.org/repo ubuntu-trusty main&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;tee&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;usermod&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;aG&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;ubuntu&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then logout and login again as user ubuntu.&lt;/p&gt;
&lt;p&gt;Now install Docker-compose with the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/docker/compose/releases/download/1.5.2/docker-compose-`uname -s`-`uname -m` &amp;gt; $ /usr/local/bin/docker-compose&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;chmod&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;compose&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you need to edit the security groups for your instance. We will need to
expose the following host ports to the machines that "produce" logs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP 5000 (Logstash)&lt;/li&gt;
&lt;li&gt;TCP 9200 (Elasticsearch REST JSON interface)&lt;/li&gt;
&lt;li&gt;TCP 9300 (Elasticsearch transport protocol)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and the following port to the Internet (but be aware that our Kibana setup
won't provide any kind of authentication mechanism!):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP 5601 (Kibana web UI)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, you may want to assign a DNS name to the EC2 instance so you can
easily reach Kibana. Let's assume that you use &lt;code&gt;logs.mydomain.com&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Moreover, the Django hosts will need to publish their logs to Logstash possibly
not through a public network. Encrypting logs is out of the scope of this tutorials:
as a security measure we can bind a private DNS name to the private IP of your
EC2 instance (you can use Route53 on AWS for that purpose) and have Django
publish logs on that name. Let's assume the private IP of our instance is:
&lt;code&gt;13.0.0.13&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Setup Docker containers for ELK applications&lt;/h2&gt;
&lt;p&gt;As I told before, we want to leverage Docker to quickly spin-up our ELK stack.
I found a very good Github project by Anthony Lapenna: &lt;a href="https://github.com/deviantony/docker-elk"&gt;docker-elk&lt;/a&gt;,
it basically is an out-of-the-box setup (YML file) for Docker-compose to run
all the applications in the ELK stack, each one a separate Docker container.
Containers are instrumented so they can communicate and the one running Kibana
will get mapped to a public port of the EC2 host.&lt;/p&gt;
&lt;p&gt;We can clone the repo with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/deviantony/docker-elk&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the repo you find subfolders for each ELK component, storing config files
that you can modify according to your needs.&lt;/p&gt;
&lt;p&gt;Bringing up all the ELK stack is as simple as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;elk&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;compose&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After a while, you can test that the containers have been started:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;ps&lt;/span&gt;
&lt;span class="n"&gt;CONTAINER&lt;/span&gt; &lt;span class="n"&gt;ID&lt;/span&gt;        &lt;span class="n"&gt;IMAGE&lt;/span&gt;                  &lt;span class="n"&gt;COMMAND&lt;/span&gt;                  &lt;span class="n"&gt;CREATED&lt;/span&gt;             &lt;span class="n"&gt;STATUS&lt;/span&gt;              &lt;span class="n"&gt;PORTS&lt;/span&gt;                                             &lt;span class="n"&gt;NAMES&lt;/span&gt;
&lt;span class="mf"&gt;8f&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="n"&gt;a3f8d142&lt;/span&gt;        &lt;span class="n"&gt;dockerelk_kibana&lt;/span&gt;       &lt;span class="s"&gt;&amp;quot;/docker-entrypoint.s&amp;quot;&lt;/span&gt;   &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="n"&gt;ago&lt;/span&gt;       &lt;span class="n"&gt;Up&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;        &lt;span class="mf"&gt;0.0.0.0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5601&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;5601&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tcp&lt;/span&gt;                            &lt;span class="n"&gt;dockerelk_kibana_1&lt;/span&gt;
&lt;span class="n"&gt;d2530f2e0194&lt;/span&gt;        &lt;span class="n"&gt;logstash&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;        &lt;span class="s"&gt;&amp;quot;/docker-entrypoint.s&amp;quot;&lt;/span&gt;   &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="n"&gt;ago&lt;/span&gt;       &lt;span class="n"&gt;Up&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;        &lt;span class="mf"&gt;0.0.0.0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tcp&lt;/span&gt;                            &lt;span class="n"&gt;dockerelk_logstash_1&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;c6580429bde&lt;/span&gt;        &lt;span class="n"&gt;elasticsearch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;/docker-entrypoint.s&amp;quot;&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="n"&gt;ago&lt;/span&gt;      &lt;span class="n"&gt;Up&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;        &lt;span class="mf"&gt;0.0.0.0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9200&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;9200&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tcp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mf"&gt;0.0.0.0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9300&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;9300&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tcp&lt;/span&gt;   &lt;span class="n"&gt;dockerelk_elasticsearch_1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can test if Kibana is running by pointint your browers to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="nl"&gt;http:&lt;/span&gt;&lt;span class="c1"&gt;//logs.mydomain.com:5601&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you see, using Docker-compose makes it really easy to spin up again the whole
stack just in case of errors. If you want to bring down the ELK stack, just do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;compose&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;from inside the &lt;code&gt;/home/ubuntu/docker-elk&lt;/code&gt; folder.&lt;/p&gt;
&lt;h2&gt;Instrument Django to use centralized logging&lt;/h2&gt;
&lt;p&gt;This will be very simple: we can use the &lt;code&gt;python-logstash&lt;/code&gt; binding library developed
by &lt;a href="https://github.com/vklochan/python-logstash"&gt;GitHub user vklochan&lt;/a&gt;. This
library will tell Django to send logs also to Logstash via network, but it
needs a bit of configuration before.&lt;/p&gt;
&lt;p&gt;Switch to the host (eg: localhost) where your Django setup is, then install the
library with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;logstash&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let us assume your Django app is named &lt;em&gt;myapp&lt;/em&gt;. Open the &lt;code&gt;settings.py&lt;/code&gt; file where
all the Django config settings live. You should spot a section about logging
(the &lt;code&gt;LOGGING&lt;/code&gt; dict):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;LOGGING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt; &lt;span class="n"&gt;formatters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;

        &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;myhandler&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Bla&lt;/span&gt; &lt;span class="n"&gt;bla&lt;/span&gt; &lt;span class="n"&gt;bla&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;logstash&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;logstash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TCPLogstashHandler&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;13.0.0.13&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;IP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;our&lt;/span&gt; &lt;span class="n"&gt;Logstash&lt;/span&gt; &lt;span class="n"&gt;EC2&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;
                &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;message_type&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;logstash&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;fqdn&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;myapp&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;loggers&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;myapp&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;myhandler&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;logstash&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The configuration is pretty straightforward to understand (for more info please
take a look at &lt;code&gt;python-logstash&lt;/code&gt;'s' GitHub project wiki)&lt;/p&gt;
&lt;p&gt;Now all you need to do is restart Django and take a look at Kibana if logs get tracked.&lt;/p&gt;
&lt;h1&gt;Further references&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-elasticsearch-logstash-and-kibana-elk-stack-on-ubuntu-14-04"&gt;This&lt;/a&gt;
guide can be useful to setup authentication on Kibana.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">csparpa</dc:creator><pubDate>Sat, 01 Oct 2016 17:00:00 +0200</pubDate><guid>tag:csparpa.github.io,2016-10-01:blog/2016/10/django-centralized-logging-on-ec2-with-logstash.html</guid><category>Django</category><category>Python</category><category>Logstash</category><category>Elasticsearch</category><category>Kibana</category><category>logging</category><category>EC2</category><category>AWS</category><category>Docker</category><category>Docker-compose</category></item><item><title>Check truthiness in Python</title><link>http://csparpa.github.io/blog/2015/02/python-truthiness.html</link><description>&lt;p&gt;Today I just want to share with you how to check truth values in Python. &lt;strong&gt;Truthiness&lt;/strong&gt; is the boolean meaning of a value, and sometimes checking it can save you a lot of hassle. &lt;/p&gt;
&lt;h3&gt;In Python veritas&lt;/h3&gt;
&lt;p&gt;Each Python built-in type has a truthiness value:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Type&lt;/th&gt;
&lt;th align="center"&gt;True when&lt;/th&gt;
&lt;th align="center"&gt;False when&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;NoneType&lt;/code&gt;&lt;/td&gt;
&lt;td align="center"&gt;never&lt;/td&gt;
&lt;td align="center"&gt;always&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt;
&lt;td align="center"&gt;non-empty&lt;/td&gt;
&lt;td align="center"&gt;empty&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;td align="center"&gt;not &lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/td&gt;
&lt;td align="center"&gt;non-empty&lt;/td&gt;
&lt;td align="center"&gt;empty&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;list&lt;/code&gt;&lt;/td&gt;
&lt;td align="center"&gt;non-empty&lt;/td&gt;
&lt;td align="center"&gt;empty&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/td&gt;
&lt;td align="center"&gt;non-empty&lt;/td&gt;
&lt;td align="center"&gt;empty&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;set&lt;/code&gt;&lt;/td&gt;
&lt;td align="center"&gt;non-empty&lt;/td&gt;
&lt;td align="center"&gt;empty&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;custom object&lt;/td&gt;
&lt;td align="center"&gt;&lt;code&gt;bool(obj)&lt;/code&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;code&gt;bool(obj)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;/td&gt;
&lt;td align="center"&gt;is &lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;td align="center"&gt;is &lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Checking truthiness&lt;/h3&gt;
&lt;p&gt;You can explicitly check the truth value of a value using the &lt;code&gt;bool&lt;/code&gt; built-in function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="c"&gt;# True&lt;/span&gt;
&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c"&gt;# True&lt;/span&gt;
&lt;span class="n"&gt;boole&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="c"&gt;# True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So this - funny fact - means that &lt;code&gt;bool('False') is&lt;/code&gt;True`: in Python there are no such things as Java's&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Boolean&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;       &lt;span class="c"&gt;# b1 is false&lt;/span&gt;
&lt;span class="n"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parseBoolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c"&gt;# b2 is false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Truthiness vs nonethiness&lt;/h3&gt;
&lt;p&gt;In example, if you have a list and you want to check if it's empty or not, you can do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Empty&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but also - more concisely and more Pythonically:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Empty&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;this is because the truth value of an empty list is &lt;code&gt;False&lt;/code&gt;. But, be aware that if you do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Empty&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;you will get the same result ("Empty" being printed)! This is because the truth value of &lt;code&gt;None&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt; as well. So this raises a flag: &lt;em&gt;checks for truthiness and nonethiness overlap, and therefore must be differentiated on a syntactical base&lt;/em&gt;. I usually do this by &lt;em&gt;explicitly&lt;/em&gt; checking for nonethiness:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c"&gt;# explicit check for nonethiness&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;None&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="c"&gt;# check for emptiness&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Empty&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Defining truthiness for your class&lt;/h3&gt;
&lt;p&gt;You can define the behaviour of your own objects when processed by the &lt;code&gt;bool&lt;/code&gt; built-in. This is done by redefining the &lt;code&gt;__bool__&lt;/code&gt; hook&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;__bool__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# False, always&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What happens if you don't redefine the hook? The Python documentation says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;object.&lt;strong&gt;&lt;strong&gt;bool&lt;/strong&gt;(self)&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Called to implement truth value testing and the built-in operation &lt;code&gt;bool()&lt;/code&gt;; should return &lt;code&gt;False&lt;/code&gt; or &lt;code&gt;True&lt;/code&gt;. When this method is not defined, &lt;code&gt;__len__()&lt;/code&gt; is called, if it is defined, and the object is considered true if its result is nonzero. If a class defines neither &lt;code&gt;__len__()&lt;/code&gt; nor &lt;code&gt;__bool__()&lt;/code&gt;, all its instances are considered true.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;p&gt;For a complete reference on Python datamodel's truthiness check out &lt;a href="https://docs.python.org/3/reference/datamodel.html"&gt;the official documentation&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">csparpa</dc:creator><pubDate>Mon, 23 Feb 2015 11:00:00 +0100</pubDate><guid>tag:csparpa.github.io,2015-02-23:blog/2015/02/python-truthiness.html</guid><category>Python</category><category>truthiness</category><category>nonethiness</category><category>caveat</category></item><item><title>Serve minified CSS and Javascript on a Pelican-powered blog</title><link>http://csparpa.github.io/blog/2015/02/minify-resources-for-pelican-blog.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;In this short tutorial I'll show you how to wire minified CSS and Javascript into your Pelican-powered blog - I did it on my own one (the one you're currently reading!)&lt;/p&gt;
&lt;h3&gt;How minification works&lt;/h3&gt;
&lt;p&gt;"Minification" is the process of compressing the content of CSS and Javascript files by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;removing characters (like whitespaces and tabs) the processor/interpreter is insensitive to&lt;/li&gt;
&lt;li&gt;replacing long variable names with shorter ones (eg: naming variables with just one or two letters)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is helpful as it decreases the size of &lt;code&gt;.css&lt;/code&gt; and &lt;code&gt;.js&lt;/code&gt; files and therefore when these files will be sent over the wire they'll take less time (and bandwidth) to be delivered.&lt;/p&gt;
&lt;p&gt;A shortcoming is that minified code is no longer readable by humans, but this seldom is a problem as minification is a one-way process and one can automate it in order to keep the unminified source files apart.&lt;/p&gt;
&lt;h3&gt;Requirements&lt;/h3&gt;
&lt;p&gt;You can read in &lt;a href="http://csparpa.github.io/blog/2014/11/setup-static-blog-with-pelican.html"&gt;my previous post&lt;/a&gt; how to setup a weblog using the Pelican library.&lt;/p&gt;
&lt;p&gt;In order to install the dependencies we'll need, you need to install the &lt;code&gt;pip&lt;/code&gt; package manager&lt;/p&gt;
&lt;h3&gt;Install minifiers&lt;/h3&gt;
&lt;p&gt;There are lots of CSS and Javascript minifiers out there.&lt;/p&gt;
&lt;p&gt;I've looked specifically for Python minifiers and found &lt;code&gt;jsmin&lt;/code&gt; for Javascript minification and &lt;code&gt;csscompressor&lt;/code&gt; for CSS minification.&lt;/p&gt;
&lt;p&gt;You can install them with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; pip install jsmin
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; pip install csscompressor
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Use minifiers&lt;/h3&gt;
&lt;p&gt;Their usage is very simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Minify a Javascript file&lt;/span&gt;
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; python -m jsmin my.js &amp;gt; my-minified.js

&lt;span class="c"&gt;# Minify a CSS file&lt;/span&gt;
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; python -m csscompressor -o my-minified.css my.css
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The minifiers output shall be put into your blog's css and js folders, getting served by your webserver.&lt;/p&gt;
&lt;p&gt;You can (and you should) add the resource minification commands to your automatic blog-build script - and if you don't have one, go make it! ;)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">csparpa</dc:creator><pubDate>Tue, 10 Feb 2015 10:41:00 +0100</pubDate><guid>tag:csparpa.github.io,2015-02-10:blog/2015/02/minify-resources-for-pelican-blog.html</guid><category>Python</category><category>blogging</category><category>Pelican</category><category>Javascript</category><category>CSS</category><category>minify</category></item><item><title>Guidelines for writing a good CV in the software development industry</title><link>http://csparpa.github.io/blog/2014/11/writing-a-good-cv-in-the-software-development-industry.html</link><description>&lt;p&gt;Writing a good CV is the key to obtaining your dream job and successfully start/boost your career.&lt;br /&gt;
But if you're a software craftsman, writing a good CV isn't so easy and there is a plenty of
reasons why you should give the maximum relevance to it.  &lt;/p&gt;
&lt;p&gt;Please note that in this post I'm talking about CV writing for &lt;em&gt;technical&lt;/em&gt; positions: this means that the formats won't be
good for management/different kind of positions.&lt;/p&gt;
&lt;h3&gt;...isn't it enough to just write down my previous jobs and my skillset?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;No!&lt;/strong&gt; Keep on reading...  &lt;/p&gt;
&lt;h3&gt;What a CV really is: selling by differentiating&lt;/h3&gt;
&lt;p&gt;A CV is an &lt;em&gt;advertisement&lt;/em&gt;. It exists to blink an eye to potential customers, which in career development
are employers. So the aim of your CV is: have the customers buy yourself.&lt;br /&gt;
And what would you do in order to sell yourself as a product?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Believe in your product&lt;/strong&gt;. You're worth your skills, which have been built after years of studies, experience, abnegation. This is something that everyone,
but first of all &lt;em&gt;you&lt;/em&gt; must respect.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Present the product in the better possible fashion&lt;/strong&gt;. Many facets around that:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;have your &lt;em&gt;good parts&lt;/em&gt; stand out - so everyone knows what you're good at!&lt;/li&gt;
&lt;li&gt;be &lt;em&gt;concrete&lt;/em&gt;: provide facts, numbers, achievements&lt;/li&gt;
&lt;li&gt;be &lt;em&gt;concise&lt;/em&gt; and leave &lt;em&gt;cliffhangers&lt;/em&gt;: don't tell the whole story! Just provide fundamental facts, but let people come back to you to ask for more detail&lt;/li&gt;
&lt;li&gt;&lt;em&gt;never lie about yourself&lt;/em&gt;: if you do, you are doomed to eternal unsuccess. What you need to do, instead, is try to hide as much as possible your weaknesses (in terms of technical, behavioural, organisational debts) or -
even better - to show them under a positive view, as things you're currently keen on improving.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;let the advertisement be pleasant to the customer's eyes&lt;/em&gt;: the text should be clear and readable. So you need to use proper fonts, sizes, colours and to align contents consistently.&lt;/li&gt;
&lt;li&gt;double-check for &lt;em&gt;typos&lt;/em&gt; (if you still make grammar mistakes, please go back to school...)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Show your passion and hunger&lt;/strong&gt;: show how much &lt;em&gt;passion&lt;/em&gt; and &lt;em&gt;commitment&lt;/em&gt; you put into the things you've made/built/worked on! This conveys your emotional status to the people so they can feel your enthusiasm. And also let people know that you're not
sitting down and waiting for change to come: give evidence that you &lt;em&gt;embrace change&lt;/em&gt;, are &lt;em&gt;proactive&lt;/em&gt; and &lt;em&gt;eager to improve yourself and your skills&lt;/em&gt; in any possible way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Differentiate your product from the others&lt;/strong&gt;: absolutely &lt;em&gt;avoid being uniformed&lt;/em&gt;. If you become a number, your chances to smash the opponents will dramatically decrease: therefore, always strive to stand out of the crowd by formatting your CV in
a smart and appealing way. This can be achieved using custom structure and graphics, but be careful not to exceed with your imagination...&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;A possible CV format&lt;/h3&gt;
&lt;p&gt;Unless explicitly requested by employers, you should avoid CV formats such as Europass who are meant to standardise candidate profiles
for all potential employers to easily browse through: this is obviously against product differentiation. Besides that, compiling the endless Europass templates is a damn boring task!  &lt;/p&gt;
&lt;p&gt;After a bit of experimentation applying to job openings both in Italy and the UK, I've come up with a potentially good CV format (you tell me), that can be used as a start and admittedly &lt;em&gt;must&lt;/em&gt; be modified!  &lt;/p&gt;
&lt;h4&gt;Overview&lt;/h4&gt;
&lt;p&gt;I personally prefer minimalist CV formats: no colors, no icons, only one type of font.  &lt;/p&gt;
&lt;p&gt;Keep in mind that there will be a 99% probability that you'll send your CV in PDF format, so don't rely on features that are specific to your word processor.  &lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;aims&lt;/strong&gt; of this CV format - and of any CV targeting software jobs - are to tell your potential employer:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;what your technical skills are&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;what SW projects (either at work or in your spare time) you've been working on and under what roles&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;String emphasis is put on &lt;em&gt;skills acquired through experience&lt;/em&gt;, therefore this format is not a good match for recent-grads or persons with a little experience at work.  &lt;/p&gt;
&lt;p&gt;Also remember that this CV should be always sent out &lt;strong&gt;with a proper cover letter&lt;/strong&gt; introducing it to the recipients (more about it in a while).  &lt;/p&gt;
&lt;p&gt;And finally... as diversification is fundamental, &lt;strong&gt;please do not dumbly copy/adapt the CV format!&lt;/strong&gt;. I encourage you to &lt;strong&gt;change it according to your specific needs&lt;/strong&gt;!&lt;/p&gt;
&lt;h4&gt;The format&lt;/h4&gt;
&lt;p&gt;Let's take Cicero as candidate for a SW development job... :-)  &lt;/p&gt;
&lt;p&gt;&lt;img alt="A possible CV format for SW development industry" src="/blog/img/cv-format.png" title="A possible CV format for SW development industry" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="/blog/res/cv-format-template.odt"&gt;Download the .odt CV format template&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Length&lt;/h4&gt;
&lt;p&gt;No more than 2 pages! Therefore you need to be sharp and concise. The more you write, the more chances are your reader gets bored and gives up only because of the CV length!  &lt;/p&gt;
&lt;p&gt;Also, absolutely avoid repetitions of any kind: every important fact/skill should be mentioned only once.&lt;/p&gt;
&lt;h4&gt;Raw structure&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Headline&lt;/strong&gt;. All of your names and surnames, and a short [optional] tagline saying what your profession is (or what profession you desire to do in your life). I especially like to use eye-catching sentences for the tagline, as they create expectations/curiosity in readers. Any photos? The decision depends on you: if you choose to attach one, make sure you look professional!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Contact points&lt;/strong&gt;. Make sure you include at least your e-mail address and mobile number, then you can add your address and a few optional links: eg, to your Linkedin account (which should only complement - never replace - your full CV!), to your personal website, etc. I suggest to avoid putting your social network references, unless your employer specifically asks for them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Personal profile&lt;/strong&gt; [optional]. This seems to be a very opinionated section: in my experience, this part is widely used in the UK and almost always neglected in Italy.
It's a concise and brilliant introduction to yourself, where you especially focus on your soft skills: think of it as a "speed-date" description of yourself as a professional. Provided you keep it brief, it can give a good reminder of your good parts (skills and potential), but the risk is to overlap the concepts you explain in the cover letter. So you might consider to avoid putting this when you have the chance to send a cover letter along with your CV.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Skills&lt;/strong&gt;. The most fundamental part in your CV, believe it or not. Put here &lt;em&gt;all the skills that match the ones required by the job spec&lt;/em&gt; you're addressing. Please note that &lt;em&gt;you must be ready to prove that you own each of the skills you list here&lt;/em&gt;! So don't exagerate. Advice: don't list everything you can do/use (leave out the skills that are not pertaining to the job spec or the company's business) and leave out the "obvious" things for a computer literate - like using Skype or the ability to browse the Internet... Also, this section is a good place where to talk about your soft and organisational skills, but consider to move your soft skills to the "Personal profile" section or to the cover letter.
As one could have multiple cross-concerning skills, it's a good practice to catalogue them into subsections. Of course many more could be added to the template (eg: mobile computing, operating systems, embedded systems, etc...). I recommend to put at least the following categories:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Programming languages&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Software development&lt;/em&gt; (agile methodologies? OOP skills? design patterns?)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Software design&lt;/em&gt; (Computer architectures? OOD? UML? ERD?)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Software testing&lt;/em&gt; (continuous integration? TDD? testing libraries/framework?)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Development tools&lt;/em&gt; (revision control tools? documentation tools? issue tracking tools?) &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Frameworks/platforms&lt;/em&gt; (web frameworks? ORMs?)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cloud computing&lt;/em&gt; (reference any PaaS/IaaS/BEaaS you've been using)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Open source contributions&lt;/em&gt; (put references to your GitHub/BitBucket/etc.. contributions or projects)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Databases&lt;/em&gt; (put here RDSs and NoSQL datastores you know)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Work experience&lt;/strong&gt;. List the most important work experiences of your life relative to the job spec! You should also put the major roles you had in the projects you list. It's better to list work experiences in reverse chronological order (along with start/end dates) and to add name, address and website link for each past employer.
&lt;em&gt;Make any concrete achievements you had and SW projects you worked on stand out!&lt;/em&gt; Achievements not only include writing working software systems but also improving the SW development practices, mentoring colleagues, boost to automatisation of repetitive tasks, documenting patterns/procedures, enforcing specific development/testing methodologies, focus attention on SW quality/security/usability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Education&lt;/strong&gt; [optional but adviced]. I would say this section can be omitted, especially if you come from a non software-related background and/or you have ebough experience in the industry and therefore there is no need to show that you have a pertaining academic background. Usually, experience is exchanged 3:1 against knowledge! Nevertheless, please do add to this section any &lt;em&gt;certifications&lt;/em&gt;, &lt;em&gt;master courses&lt;/em&gt;, &lt;em&gt;MBAs&lt;/em&gt;, etc.. you obtained along with marks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spoken languages&lt;/strong&gt;. List all the languages you currently speak/write along with a honest estimate of your proficiency.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hobbies&lt;/strong&gt; [optional but adviced]. Work could be biggest thing in our life if we consider the amount of time we spend at it, but honestly should only be one half of it if we consider the passion and interest we put to itm the remaining part should be dedicated to personal hobbies.
If you want to give a complete view on yourself, you need to tell about your major interests outside of work. Remember that people having lots of personal interests 
look dynamic and more interesting to potential employers than people "who just commit hard when working": making the most out of diverse leisure activities helps
to keep your mind and energies fresh and not to be overwhelmed by huge workloads when they occur!&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Styling&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;the font is Arial 10 for paragraph text and 12 for titles&lt;/li&gt;
&lt;li&gt;I only use colour black for text&lt;/li&gt;
&lt;li&gt;sections are clearly identifiable as they are kept separate one from each other&lt;/li&gt;
&lt;li&gt;I use tables to align content: one table for each section. And I also make their borders invisible&lt;/li&gt;
&lt;li&gt;all the provided web links have their corresponding URLs as text and are clickable&lt;/li&gt;
&lt;li&gt;I use a lot of bullet lists (also indented): they're clear and concise&lt;/li&gt;
&lt;li&gt;the name+surname is repeated in the footer of each page, along with page number&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The cover letter&lt;/h3&gt;
&lt;p&gt;Think of a cover letter as the "positioning" of your advertisement: if you place an outstanding and appealing ad somewhere nobody can see, there's no point in
creating such a good ad as nobody will ever notice it. So a good cover letter is most of the times &lt;strong&gt;as important as a proper CV&lt;/strong&gt;!  &lt;/p&gt;
&lt;p&gt;I won't give examples of cover letter, as this really depends on the company you're applying for (formal vs informal slant), the position you're applying for and any possible costraint you have on its length and medium (eg: e-mail, web form, etc.).  &lt;/p&gt;
&lt;p&gt;The important points at it are telling to any potential employer:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;why you think you are the best possible fit for the job vacancy&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;what your motivations are as regards the job&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Generally speaking, the best advices for writing a smashing cover letter are:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;give the cover letter an "A-B-A" pattern : the "A" part consists of telling why you are suitable for the job (experience? knowledge? both of these?), the "B" part consists of telling what added value/skillsets you could bring to the company. Please notice that the "A" part is reiterated before closing the letter!&lt;/li&gt;
&lt;li&gt;spot keywords/technologies in the job spec that you think are fundamental and the candidate needs to have: make sure each of these appear the first occurrence of the "A" part of your cover letter and briefly explain where you achieved them.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Strategies for CV+cover letter bullet-proofing&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Write down your CV&lt;/li&gt;
&lt;li&gt;Write down a proper cover letter&lt;/li&gt;
&lt;li&gt;Compare both against the job spec and match job spec keywords. If your CV+cover are not matching at least 90% of the job spec's keywords, then you need to change them accordingly&lt;/li&gt;
&lt;li&gt;Have your CV+cover read by a fellow professional (eg: another developer, an IT manager, etc.)&lt;/li&gt;
&lt;li&gt;Put yourself in the shoes of a potential employer: would you give a chance to someone with your profile? Sincerely. If the answer is not a full "yes!", then somethig must be changed in your CV+cover.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Managing your online work profiles&lt;/h3&gt;
&lt;p&gt;I've been tempted a lot of times to write down my CV using Markdown, compile it to plain HTML and host it as a page of my personal website. That is cool for sure, but this only helps the proliferation of duplicated work profiles I have on a plethora of websites (such as Linkedin, job notification boards, etc..): this means that every time I need to update my CV with - in example - a new job position or a new skill I've acquired, I need to add/modify each and every profile in a consistent way.  &lt;/p&gt;
&lt;p&gt;I don't like it: &lt;em&gt;duplication is the root of evil&lt;/em&gt;, in software development as in CV writing! The ideal situation would be: write once and deploy everywhere, so &lt;em&gt;try to keep at minimum the number of work profiles you have online&lt;/em&gt;!  &lt;/p&gt;
&lt;p&gt;My advice is to only keep one profile on the most used work network, &lt;em&gt;Linkedin&lt;/em&gt;, and keep it in sync with your "plain-old" CV on paper.  &lt;/p&gt;
&lt;p&gt;Then also &lt;em&gt;make sure your Linkedin profile is read by as many people as possible&lt;/em&gt;! This involves building and managing your social networks, subscribing to user groups discussing thing you've worked with or would love to (this helps you to find like-minded people and also gives recruiters visibility on you)... and of course, again, selling your product: add the link to your Linkedin profile to your e-mail signature and share it on the social networks, also put it on your personal website pages!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">csparpa</dc:creator><pubDate>Sun, 09 Nov 2014 18:32:00 +0100</pubDate><guid>tag:csparpa.github.io,2014-11-09:blog/2014/11/writing-a-good-cv-in-the-software-development-industry.html</guid><category>CV</category><category>software</category><category>development</category><category>skills</category><category>recruitment</category></item><item><title>Setup a static Python-powered blog/website with Pelican</title><link>http://csparpa.github.io/blog/2014/11/setup-static-blog-with-pelican.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;Pelican is a Python library that allows static content generation from plain text files written using ReSructured Text or Markdown syntaxes.&lt;br /&gt;
It is an efficient, easy to setup tool that can - in example - be used to create blogs in minutes.&lt;br /&gt;
More info on the &lt;a href="http://blog.getpelican.com/"&gt;official Pelican blog&lt;/a&gt;, and of course links to source code and docs.  &lt;/p&gt;
&lt;p&gt;In this tutorial we'll be generating a blog and posting content using Markdown.&lt;br /&gt;
We'll call our blog: "blog"  &lt;/p&gt;
&lt;h3&gt;Requirements&lt;/h3&gt;
&lt;p&gt;You will need Python 2.7+ and the &lt;code&gt;pip&lt;/code&gt; package manager&lt;/p&gt;
&lt;h3&gt;Install Pelican&lt;/h3&gt;
&lt;p&gt;Install Pelican and Markdown syntax modules:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; pip install pelican Markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Create a skeleton Pelican project&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; 
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; mkdir blog
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;blog
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; pelican-quickstart
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; tree
    ./
    +-- content              &lt;span class="c"&gt;# Place here source .md files&lt;/span&gt;
    +-- output               &lt;span class="c"&gt;# Will contain the output .html files after generation&lt;/span&gt;
    +-- develop_server.sh
    +-- fabfile.py
    +-- Makefile
    +-- pelicanconf.py       &lt;span class="c"&gt;# Main settings file&lt;/span&gt;
    +-- publishconf.py       &lt;span class="c"&gt;# Settings to use when ready to publish&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Install themes&lt;/h3&gt;
&lt;p&gt;You can modify Pelican's default theme by installing (cloning) one or more
of the &lt;a href="https://github.com/getpelican/pelican-themes"&gt;themes you find on Github&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;pelican-test
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; mkdir -p themes/fresh  &lt;span class="c"&gt;# I&amp;#39;ve chosen to install the &amp;#39;fresh&amp;#39; theme&lt;/span&gt;
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; git clone git://github.com/jsliang/pelican-fresh themes/fresh
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Write Pelican configuration file&lt;/h3&gt;
&lt;p&gt;The configuration file is &lt;code&gt;pelicanconf.py&lt;/code&gt;, it will be used by Pelican
when generating HTML content from the Markdown sources:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;

&lt;span class="n"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;me&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;blog&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# Pelican will take contents in this folder as sources&lt;/span&gt;
&lt;span class="n"&gt;PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;TIMEZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Europe/London&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;en&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# Feed generation&lt;/span&gt;
&lt;span class="n"&gt;FEED_ALL_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;TRANSLATION_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="c"&gt;# Blogroll links&lt;/span&gt;
&lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;My link 1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://mylink1.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;My link 2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://mylink2.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;

&lt;span class="c"&gt;# Social widget links&lt;/span&gt;
&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;My social link 1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;https://mysociallink1.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;My social link 2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;https://mysociallink2.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;

&lt;span class="c"&gt;# Max Number of article previews per page&lt;/span&gt;
&lt;span class="n"&gt;DEFAULT_PAGINATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="c"&gt;# Document-relative URLs ?&lt;/span&gt;
&lt;span class="n"&gt;RELATIVE_URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="c"&gt;# Path to the theme you want to apply&lt;/span&gt;
&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;themes/fresh&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Write a blog post&lt;/h3&gt;
&lt;p&gt;Now write a Markdown blog post like this one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Title: My test blog post
Date: 2014-11-01 13:49
Category: attempts
Tags: blogging, pelican, markdown
Slug: my-test-blog-post
Authors: me
Summary: This is a really deep and introspective test blog post

What is the meaning of life the universe and everything?
--------------------------------------------------------
42
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and save it into the &lt;code&gt;content&lt;/code&gt; folder as &lt;code&gt;test.md&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Generate HTML from Markdown&lt;/h3&gt;
&lt;p&gt;You're now ready to generate the corresponding HTML content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; pelican content -o output
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; tree output
    output/
    +-- author/
    +-- category/
    +-- feeds/
    +-- images/
    +-- tag/
    +-- theme/
    +-- archives.html
    +-- authors.html
    +-- categories.html
    +-- index.html
    +-- my-test-blog-post.html
    +-- tags.html
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Take a look!&lt;/h3&gt;
&lt;p&gt;You can now preview your blog by launching a web server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; python -m SimpleHTTPServer 8888
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and pointing your browser to &lt;a href="http://localhost:8888"&gt;http://localhost:8888&lt;/a&gt;.&lt;br /&gt;
Cool, isn't it?&lt;/p&gt;
&lt;h3&gt;Installing Pelican plugins&lt;/h3&gt;
&lt;p&gt;Pelican is an extensible platform, which means you can add one or more &lt;a href="https://github.com/getpelican/pelican-plugins"&gt;plugins&lt;/a&gt;
into it and add functionalities.&lt;br /&gt;
You can install community-provided plugins by cloning the plugins repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; git clone https://github.com/getpelican/pelican-plugins plugins
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now the plugins are in the &lt;code&gt;plugins&lt;/code&gt; folder and you can enable/disable them and put their corresponding configuration
data into your Pelican configuration file.&lt;/p&gt;
&lt;h3&gt;Adding an XML sitemap&lt;/h3&gt;
&lt;p&gt;You want your blog to be fully crawled by Google, dont' you? So you need to generate a sitemap for it.&lt;br /&gt;
Generating a sitemap is easy if you use the &lt;code&gt;sitemap&lt;/code&gt; plugin.&lt;br /&gt;
What you need to do is, once you've installed all the plugins, add the following lines to the &lt;code&gt;pelicanconf.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Path to the folder containing the plugins&lt;/span&gt;
&lt;span class="n"&gt;PLUGIN_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;plugins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# The plugins you want to be enabled&lt;/span&gt;
&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;sitemap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# Configuration for the &amp;quot;sitemap&amp;quot; plugin&lt;/span&gt;
&lt;span class="n"&gt;SITEMAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;format&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;priorities&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;articles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;indexes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;pages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;changefreqs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;articles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;always&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;indexes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hourly&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;pages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;monthly&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Regenerate the output and you'll notice your &lt;code&gt;output&lt;/code&gt; folder now contains a &lt;code&gt;sitemap.xml&lt;/code&gt; file.  &lt;/p&gt;
&lt;h3&gt;Where to go from here&lt;/h3&gt;
&lt;p&gt;Now you can upload the contents of the &lt;code&gt;output&lt;/code&gt; folder 'as are' to your web hosting provider.&lt;br /&gt;
Don't forget to setup your Google Analytics account to crawl to the domain you publish the pages under.&lt;br /&gt;
Visit the  &lt;a href="http://docs.getpelican.com/en/3.4.0/tips.html"&gt;Pelican tips page&lt;/a&gt; which also explains how to integrate Pelican into GitHub pages.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">csparpa</dc:creator><pubDate>Sat, 01 Nov 2014 13:49:00 +0100</pubDate><guid>tag:csparpa.github.io,2014-11-01:blog/2014/11/setup-static-blog-with-pelican.html</guid><category>Python</category><category>blogging</category><category>Pelican</category></item><item><title>Meditation on the Zen of Python</title><link>http://csparpa.github.io/blog/2014/01/meditation-on-the-zen-of-python.html</link><description>&lt;h3&gt;Read it&lt;/h3&gt;
&lt;p&gt;If you have ever programmed anything in Python, you probably used the &lt;code&gt;import&lt;/code&gt; statement: the modules of the Python standard library 
can be imported into your code or into the interpreter. Take a look at the standard library folders and you'll find the &lt;code&gt;this.py&lt;/code&gt; module... what is that?
Not much a self-explicative name for a Python module, huh? And you – Java lovers – forget about the Java &lt;code&gt;this&lt;/code&gt; keyword: you're far afield.  &lt;/p&gt;
&lt;p&gt;This module is the mystic &lt;strong&gt;&lt;em&gt;"Zen of Python"&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;this&lt;/span&gt;

&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Zen&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;Tim&lt;/span&gt; &lt;span class="n"&gt;Peters&lt;/span&gt;

&lt;span class="n"&gt;Beautiful&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;ugly&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Explicit&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;implicit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Simple&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Complex&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;complicated&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Flat&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;nested&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Sparse&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;dense&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Readability&lt;/span&gt; &lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Special&lt;/span&gt; &lt;span class="n"&gt;cases&lt;/span&gt; &lt;span class="n"&gt;aren&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;t special enough to break the rules.&lt;/span&gt;
&lt;span class="n"&gt;Although&lt;/span&gt; &lt;span class="n"&gt;practicality&lt;/span&gt; &lt;span class="n"&gt;beats&lt;/span&gt; &lt;span class="n"&gt;purity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Errors&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt; &lt;span class="n"&gt;silently&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Unless&lt;/span&gt; &lt;span class="n"&gt;explicitly&lt;/span&gt; &lt;span class="n"&gt;silenced&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;face&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;ambiguity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;refuse&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;temptation&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;There&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;preferably&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;obvious&lt;/span&gt; &lt;span class="n"&gt;way&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Although&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;way&lt;/span&gt; &lt;span class="n"&gt;may&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;obvious&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;re Dutch.&lt;/span&gt;
&lt;span class="n"&gt;Now&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Although&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;often&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;hard&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;explain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;s a bad idea.&lt;/span&gt;
&lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;easy&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;explain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;may&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="n"&gt;idea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Namespaces&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;honking&lt;/span&gt; &lt;span class="n"&gt;great&lt;/span&gt; &lt;span class="n"&gt;idea&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;s do more of those!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Woohaaaa!!! What?!?! A sort of mantra???  &lt;/p&gt;
&lt;h3&gt;The Pythonic view of the software universe&lt;/h3&gt;
&lt;p&gt;Kidding apart, the Zen states the high-level development guidelines that were followed in the design of the Python language itself;
it was formerly stated into &lt;a href="http://www.python.org/dev/peps/pep-0020/"&gt;PEP-20&lt;/a&gt; by Tim Peters, one of the fathers of the language
along with Guido Van Rossum (BDFL).&lt;br /&gt;
Ok, I'm curious about it: I open the &lt;code&gt;this.py&lt;/code&gt; file in my favourite text editor and I notice that...&lt;/p&gt;
&lt;h3&gt;The Zen of Python does not obey the Zen of Python&lt;/h3&gt;
&lt;p&gt;What??? Here is the source code:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;Gur Mra bs Clguba, ol Gvz Crgref&lt;/span&gt;

&lt;span class="s"&gt;Ornhgvshy vf orggre guna htyl.&lt;/span&gt;
&lt;span class="s"&gt;Rkcyvpvg vf orggre guna vzcyvpvg.&lt;/span&gt;
&lt;span class="s"&gt;Fvzcyr vf orggre guna pbzcyrk.&lt;/span&gt;
&lt;span class="s"&gt;Pbzcyrk vf orggre guna pbzcyvpngrq.&lt;/span&gt;
&lt;span class="s"&gt;Syng vf orggre guna arfgrq.&lt;/span&gt;
&lt;span class="s"&gt;Fcnefr vf orggre guna qrafr.&lt;/span&gt;
&lt;span class="s"&gt;Ernqnovyvgl pbhagf.&lt;/span&gt;
&lt;span class="s"&gt;Fcrpvny pnfrf nera&amp;#39;g fcrpvny rabhtu gb oernx gur ehyrf.&lt;/span&gt;
&lt;span class="s"&gt;Nygubhtu cenpgvpnyvgl orngf chevgl.&lt;/span&gt;
&lt;span class="s"&gt;Reebef fubhyq arire cnff fvyragyl.&lt;/span&gt;
&lt;span class="s"&gt;Hayrff rkcyvpvgyl fvyraprq.&lt;/span&gt;
&lt;span class="s"&gt;Va gur snpr bs nzovthvgl, ershfr gur grzcgngvba gb thrff.&lt;/span&gt;
&lt;span class="s"&gt;Gurer fubhyq or bar-- naq cersrenoyl bayl bar --boivbhf jnl gb qb vg.&lt;/span&gt;
&lt;span class="s"&gt;Nygubhtu gung jnl znl abg or boivbhf ng svefg hayrff lbh&amp;#39;er Qhgpu.&lt;/span&gt;
&lt;span class="s"&gt;Abj vf orggre guna arire.&lt;/span&gt;
&lt;span class="s"&gt;Nygubhtu arire vf bsgra orggre guna *evtug* abj.&lt;/span&gt;
&lt;span class="s"&gt;Vs gur vzcyrzragngvba vf uneq gb rkcynva, vg&amp;#39;f n onq vqrn.&lt;/span&gt;
&lt;span class="s"&gt;Vs gur vzcyrzragngvba vf rnfl gb rkcynva, vg znl or n tbbq vqrn.&lt;/span&gt;
&lt;span class="s"&gt;Anzrfcnprf ner bar ubaxvat terng vqrn -- yrg&amp;#39;f qb zber bs gubfr!&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first approach to this code might be bewildering... but it's not so hard to understand, in the end:
basically, you have a huge string containing the whole crypted Zen and then you decode it into readable English
characters and print it out loud. A few hints:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;65 is the ASCII for ‘A'&lt;/li&gt;
&lt;li&gt;97 is the ASCII for ‘a'&lt;/li&gt;
&lt;li&gt;there are 26 letters in the English alphabet&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;d&lt;/code&gt; dictionary turns out to have uppercase/lowercase chars as keys and their corresponding translitterated chars as values. The "crypting magic" is given by: &lt;code&gt;i+13 % 26 + c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You have that &lt;code&gt;"A"= decrypt[crypt["A"]] = crypt[crypt["A"]]&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Oddity: the Zen &lt;strong&gt;does not follow many of its aphorisms&lt;/strong&gt;!  &lt;/p&gt;
&lt;p&gt;In fact, its code is far from being explicit, and if it's true that readability counts, well, the Zen doesn't shine at it.
Ok, practicality beats purity but this is complex (not complicated) to read out; in fact the implementation could be simpler to explain,
which conveys that this could be done in a better way.&lt;/p&gt;
&lt;h3&gt;A metaphor&lt;/h3&gt;
&lt;p&gt;My intention is not to disapprove Tim Peters's work (never be it! I am just a silly rookie!!!) but to show what I think about the Zen:
I think that it is a metaphor. It basically poses a problem to its readers, who need to "decipher" it in order to understand how it really works:
this is a strong metaphor of life – if you dig deep on problems/difficulties you come up to be sage about them.&lt;br /&gt;
And so goes for Python design guidelines.&lt;/p&gt;
&lt;h3&gt;... and considering that "now is better than never"...&lt;/h3&gt;
&lt;p&gt;... while writing this post, I scribbeld (it was funny!) &lt;a href="https://github.com/csparpa/betterzen"&gt;a revised version of the Zen of Python&lt;/a&gt;.&lt;br /&gt;
It shows a few additional features (get random aphorisms, seek for specified keywords) that can help developers to better read and lookup the original Zen of Python.
Features that – hopefully – comply with what the Zen itself says ;-)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">csparpa</dc:creator><pubDate>Wed, 22 Jan 2014 01:00:00 +0100</pubDate><guid>tag:csparpa.github.io,2014-01-22:blog/2014/01/meditation-on-the-zen-of-python.html</guid><category>zen</category><category>Python</category><category>mantra</category><category>GitHub</category><category>software</category></item><item><title>How to use Memcached with PyOWM</title><link>http://csparpa.github.io/blog/2013/12/how-to-use-memcached-with-pyowm.html</link><description>&lt;p&gt;This is just a little demonstration on how you can quickly change the basic cache provider provided by the &lt;a href="https://github.com/csparpa/pyowm"&gt;PyOWM library&lt;/a&gt;.&lt;br /&gt;
For this purpose we'll use Memcached, which – simply put – is a key/value in-memory data store: this turns it into a perfect caching mechanism.&lt;/p&gt;
&lt;h3&gt;Requirements&lt;/h3&gt;
&lt;p&gt;This demo requires that you work on a Linux env, as Memcached originally is shipped for Unix-like systems via packet distribution systems (but can nevertheless be compiled from source).&lt;br /&gt;
I'll use Ubuntu, with Memcached 1.4.6 and PyOWM 0.4.0.&lt;br /&gt;
Let's dive into it.&lt;br /&gt;
First we install Memcached and the relative Python bindings:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; sudo apt-get install memcached python-memcache
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we install PyOWM library and check the installation:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo pip install pyowm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And we check then that library has correctly been installed by running from the Python console:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyowm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(if you don't get any error, then PyOWM was installed correctly).  &lt;/p&gt;
&lt;p&gt;Finally, let's start Memcached:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; memcached &amp;amp;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Write the adapter&lt;/h3&gt;
&lt;p&gt;In order to "plug" Memcached support into PyOWM we are going to leverage the installed Python bindings by creating
an adapter class that can conform the SW interface that PyOWM expects into the Memcached API for getting/setting cache elements.&lt;br /&gt;
Fortunately, the Memcached API is very close to the PyOWM expected interface (which is stated into the &lt;code&gt;pyowm.abstractions.owmcache.OWMCache&lt;/code&gt; class), so we have chances
that our adapter will be simple enough.&lt;br /&gt;
Let's name it &lt;code&gt;memcachedadapter.py&lt;/code&gt;: you can put it anywhere, provided that this anywhere is "seen" by the Python intepreter: in example, you can put it into any folder
listed into the &lt;code&gt;PYTHONPATH&lt;/code&gt; variable or you can place it directly into the PyOWM install folder.&lt;br /&gt;
In my distro, Python packages are installed by &lt;code&gt;pip&lt;/code&gt; into folder &lt;code&gt;/usr/local/lib/python2.6/dist-packages&lt;/code&gt;, I'll put the file over there.  &lt;/p&gt;
&lt;p&gt;Let's write the adapter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /usr/local/lib/python2.6/dist-packages/pyowm
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; sudo vim memcachedadapter.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The module will contain the &lt;code&gt;MemcachedAdapter&lt;/code&gt; class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MemcachedAdapter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;  Realizes the pyowm.abstractions.owmcache.OWMCache interface&lt;/span&gt;
&lt;span class="sd"&gt;  adapting a memcache.Client object&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

  &lt;span class="n"&gt;__ITEM_LIFETIME_MILLISECONDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="c"&gt;# Ten minutes&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;11211&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item_lifetime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;__ITEM_LIFETIME_MILLISECONDS&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;memcache&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_memcached&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_item_lifetime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item_lifetime&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request_url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_memcached&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_json&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_memcached&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_json&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_item_lifetime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I wrote this adapter in 5 minutes, so please don't blame me for errors ;-) it can surely be improved.  &lt;/p&gt;
&lt;p&gt;Now what is left to do is to tell the PyOWM library how to use the adapter: this is done via configuration. The library requires an &lt;code&gt;OWMCache&lt;/code&gt;
concrete instance which is created into a configuration file and injected into the code.  &lt;/p&gt;
&lt;p&gt;We have two options now:
1. create a new configuration file, instantiate the cache adapter in that and then use the configuration file as a parameter when instantiating the PyOM global object
2. patch the default configuraton file, commenting out the default cache object that is provided  &lt;/p&gt;
&lt;p&gt;The first solution requires us to write a new configuration module. Say our module will be &lt;code&gt;pyowm.webapi25.mycustomconfig.py&lt;/code&gt;: then you need
to copy/paste all of the config data from the default &lt;code&gt;pyowm.webapi25.configuration25.py&lt;/code&gt; configuration module, and then patch the
line where the default cache object is provided:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Cache provider to be used&lt;/span&gt;
&lt;span class="c"&gt;# cache = NullCache()  # default cache provided by PyOWM: comment out&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;memcachedadapter&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MemcachedAdapter&lt;/span&gt;  &lt;span class="c"&gt;# instantiate our adapter&lt;/span&gt;
&lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MemcachedAdapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;11211&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you need to instantiate the PyOWM object by explicitly setting the path to our custom configuration module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyowm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OWM&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;owm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OWM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_module&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pyowm.webapi25.mycustomconfig&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The second solution is more of a hack and requires us to open module &lt;code&gt;pyowm.webapi25.configuration25.py&lt;/code&gt; and do the same make up as above.
Once done, you can finally create the main PyOWM object without specifying any custom configuration module:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyowm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OWM&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;owm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OWM&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;See it in action&lt;/h3&gt;
&lt;p&gt;In the above examples, we are adapting a local Memcached instance listening on the default 11211 port, but you can change this configuration as needed.&lt;br /&gt;
Now let's try it out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;not_cached&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;owm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;daily_forecast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;London,uk&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# This first call to the API is not cached, obviously&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cached&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;owm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;daily_forecast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;London,uk&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c"&gt;# This second call is cached&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Time saving should be at a glance!&lt;/p&gt;
&lt;h3&gt;More cache adapters for PyOWM&lt;/h3&gt;
&lt;p&gt;In a similar way it is possible to write adapters for plugging other cache/storage providers (Redis, MongoDB, etc..) into the PyOWM library.  &lt;/p&gt;
&lt;p&gt;This post stimulated me to write more adapters, you can find them &lt;a href="https://github.com/csparpa/pyowm-cache-adapters"&gt;on my GitHub repo&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">csparpa</dc:creator><pubDate>Fri, 13 Dec 2013 01:00:00 +0100</pubDate><guid>tag:csparpa.github.io,2013-12-13:blog/2013/12/how-to-use-memcached-with-pyowm.html</guid><category>Python</category><category>GitHub</category><category>software</category><category>adapter</category><category>cache</category><category>Linux</category><category>Memcached</category><category>PyOWM</category></item><item><title>Web APIs design: an improvable example</title><link>http://csparpa.github.io/blog/2013/10/web-apis-design-an-improvable-example.html</link><description>&lt;p&gt;Today I want to speak about the &lt;a href="http://bugs.openweathermap.org/projects/api/wiki/API_2_5"&gt;OWM web API 2.5&lt;/a&gt; and its design. As this API follows a versioning scheme, this analysis holds for version 2.5 (which then I suppose is not changing in time!)&lt;/p&gt;
&lt;p&gt;First let me clearly state that I'm writing this post as a "gathering of thoughts” I've had during the first draft development of the PyOWM library, and it is not meant to be a negative criticism – but rather a positive review – to the  API architects/developers. I just want to write here my ideas so that the OWM API can be improved in future versions – and I will commit myself to help with this process, if needed.  &lt;/p&gt;
&lt;p&gt;I found this activity also very educational because it made me think again to all that books and articles I've read on the Internet about API design and – good grief – they were damn right!  &lt;/p&gt;
&lt;p&gt;As I said, developing the PyOWM library I had to write code interfacing with the OWM web API, which basically meant I had to setup an HTTP client and some kind of parsing module in order to read the API's responses, squeeze useful data out of them and inject data into my custom object model to the benefit of users. These funny tasks lead me, nevertheless, to crash onto a few improvable API design features that made my work unreasonably more complicated and error-prone. And a bug also came into sight.  &lt;/p&gt;
&lt;p&gt;Be warned: this is a quite long post ;-)  &lt;/p&gt;
&lt;h3&gt;Design oddities&lt;/h3&gt;
&lt;p&gt;I found the following ones:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;mismatch between endpoint naming and features that endpoints implement&lt;/li&gt;
&lt;li&gt;inconsistent formatting of JSON data returned by different endpoints when queried for the same (or similar) data entities&lt;/li&gt;
&lt;li&gt;lack of use of proper status codes in HTTP headers for error signaling&lt;/li&gt;
&lt;li&gt;certain endpoints map on 200 (Ok) HTTP status codes also 404 (Not Found) error conditions&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And there is something more… I won't blame anybody  of these, but they really should be taken into account:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the API is poorly documented&lt;/li&gt;
&lt;li&gt;the API is not RESTful&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's dig into each point.  &lt;/p&gt;
&lt;h3&gt;Endpoints: naming vs features&lt;/h3&gt;
&lt;p&gt;The API lets you basically retrieve different weather datasets (observations, forecasts, historic data) about places in the world.
The most simple and natural feature for the API is to let you query for the currently observed weather in a location: this can be specified in a twofold manner, either by passing the API a toponym or a lat/lon couple.  &lt;/p&gt;
&lt;p&gt;The related endpoints are:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#Feature: retrieve current weather - location is specified via toponym
http://api.openweathermap.org/data/2.5/weather?q=London,uk

#Feature: retrieve current weather - location is specified via lat/lon
http://api.openweathermap.org/data/2.5/weather?lat=57&amp;amp;lon=-2.15
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here the naming seems to quite proper with regards to the implemented feature: great!  &lt;/p&gt;
&lt;p&gt;Things worsen when you consider these API features: find the current weather conditions in all the locations having certain characteristics, such as having toponyms that are similar/equal to a given string or being in the neighborhood of a given lat/lon couple.&lt;br /&gt;
Here are the related endpoints:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#Feature: retrieve current weathers in all the locations whose names exactly equal to the string &amp;quot;London&amp;quot;
http://api.openweathermap.org/data/2.5/find?q=London&amp;amp;type=accurate

#Feature: retrieve current weathers in all the locations whose names contains the string &amp;quot;London&amp;quot;
http://api.openweathermap.org/data/2.5/find?q=London&amp;amp;type=like

#Feature: retrieve current weathers in all the locations in the neighborhoods of a lat/lon couple
http://api.openweathermap.org/data/2.5/find?lat=57&amp;amp;lon=-2.15
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, this lays down three questions:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;what the heck does "neighborhood” mean? The API documentation is silent about this topic. One could suppose that the API is performing a geographic search based on a circle with center into the specified lat/lon couple and a certain radius – and this is effectively what has been done in a prior (and now dismissed) version of the API. But nobody knows if this guess is true and – above all – what is the value for the radius , as it cannot be specified by the user.&lt;/li&gt;
&lt;li&gt;we know for sure that behind the API a geocoder is in action (for those who don't know what a geocoder is: it is a SW module that performs direct mapping between geographic labels – such as addresses, city names, toponyms into a geographic coordinates couple or even a geographic feature on a map. Sometimes geocoders also perform the reverse mapping): for this reason, we have a "smell” here… the "find” endpoint is implementing a geocoder-like feature: it should not be responsibility of the API to behave like that, or at least, if this responsibility is implemented it should be kept separate from the weather data provisioning. So, in my opinion, there should be an endpoint providing geocoding queries and another one providing current weather data on a single location: then, queries for current weather data on X multiple locations can be done with X API requests for current weather on a each single location. You think that users won't do that? Yes, they shouldn't: an automatic HTTP client should. Indeed, that's what APIs are meant to do: automatize :-)&lt;/li&gt;
&lt;li&gt;isn't the "accurate” parameter unnecessary? A "like” query should also give as results literal word matchings!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Another feature: retrieve weather forecasts for a location. You can get forecasts for every 3-hours of the next 5 days or for every of the next 14 days.  &lt;/p&gt;
&lt;p&gt;Here are the endpoints:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#Feature: retrieve 3h weather forecast for a location
http://api.openweathermap.org/data/2.5/forecast?q=London

#Feature: retrieve daily weather forecast for a location
http://api.openweathermap.org/data/2.5/forecast/daily?q=London
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;good naming here, but it can be improved. I would use "/forecast/daily” for daily forecast and "/forecast/3h” for 3-hours forecast. A viable alternative could be using a single endpoint "/forecast” along with a "interval=[daily|3h]” query parameter.&lt;/li&gt;
&lt;li&gt;only results coming from the daily forecast query can be paged by the user: the user can control how many results are returned by the API through an optional parameter named "cnt”. This is not possible with regards to the 3-hours forecast query: why?&lt;/li&gt;
&lt;li&gt;why isn't it possible to specify a forecast through a lon/lat couple? Maybe it is a design decision, but it creates asimmetry with the previously described API features.&lt;/li&gt;
&lt;li&gt;why isn't it possible to query for weather forecasts for all the locations having name similar to a given string or being in the neighborhood of a specific lon/lat couple? Guess it's due to API designers laziness…&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Same conceptual entities, different JSON representations&lt;/h3&gt;
&lt;p&gt;Clients of data API expect returned data to be structured using some kind of language or convention and  they also expect that structured data is organized in chunks or logical groups  that clearly convey cohesion and hierarchy. In our specific case, the description language used by the API can either be JSON or XML (but we will only rely on JSON from now on): this is a consolidated practice among the web APIs  and this sounds good. At this point, we want to inspect the JSON returned by a query for current weather data on London,UK:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#Payload of response to request:
#GET http://api.openweathermap.org/data/2.5/weather?q=London,uk
{
  &amp;quot;coord&amp;quot;: {
     &amp;quot;lon&amp;quot;: -0.12574,
     &amp;quot;lat&amp;quot;: 51.50853 },
  &amp;quot;sys&amp;quot;: {
     &amp;quot;country&amp;quot;: &amp;quot;GB&amp;quot;,
     &amp;quot;sunrise&amp;quot;: 1378877413,
     &amp;quot;sunset&amp;quot;: 1378923812 },
  &amp;quot;weather&amp;quot;: [{
     &amp;quot;id&amp;quot;: 521,
     &amp;quot;main&amp;quot;: &amp;quot;Rain&amp;quot;,
     &amp;quot;description&amp;quot;: &amp;quot;proximity shower rain&amp;quot;,
     &amp;quot;icon&amp;quot;: &amp;quot;09d&amp;quot; }],
  &amp;quot;base&amp;quot;: &amp;quot;gdps stations&amp;quot;,
  &amp;quot;main&amp;quot;: {
       &amp;quot;temp&amp;quot;: 288.88,
       &amp;quot;pressure&amp;quot;: 1021,
       &amp;quot;humidity&amp;quot;: 63,
       &amp;quot;temp_min&amp;quot;: 287.15,
       &amp;quot;temp_max&amp;quot;: 290.37 },
  &amp;quot;wind&amp;quot;: {
       &amp;quot;speed&amp;quot;: 4.6,
       &amp;quot;deg&amp;quot;: 330 },
  &amp;quot;clouds&amp;quot;: {
       &amp;quot;all&amp;quot;: 75 },
  &amp;quot;dt&amp;quot;: 1378899070,
  &amp;quot;id&amp;quot;: 2643743,
  &amp;quot;name&amp;quot;: &amp;quot;London&amp;quot;,
  &amp;quot;cod&amp;quot;: 200
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The "coord”, "country”, "id” and "name” JSON root elements refer to a single logical entity: the location for which the current weather is given (London, UK). Can you see it? Wouldn't have it been better to group all the location info into a single JSON element? For example, like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{
...
&amp;quot;location&amp;quot;:
{
  &amp;quot;coord&amp;quot;: {
     &amp;quot;lon&amp;quot;: -0.12574,
     &amp;quot;lat&amp;quot;: 51.50853 },
  &amp;quot;country&amp;quot;: &amp;quot;GB&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;London&amp;quot;,
  &amp;quot;id&amp;quot;: 2643743
}
 ...
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another legitimate question is: why location information spread out from the data regarding current weather? Here the API is clearly returning more data than it has been asked for. But what is really obscure is that location info are structured in different ways if returned by different endpoints. In example, if we ask for the daily weather forecast on London,UK we get:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#Payload of response to request:
#GET http://api.openweathermap.org/data/2.5/forecast/daily?q=London
{
&amp;quot;city&amp;quot; : {
  &amp;quot;coord&amp;quot; : {
     &amp;quot;lat&amp;quot; : 51.50853,
     &amp;quot;lon&amp;quot; : -0.12573999999999999 },
   &amp;quot;country&amp;quot; : &amp;quot;GB&amp;quot;,
   &amp;quot;id&amp;quot; : 2643743,
   &amp;quot;name&amp;quot; : &amp;quot;London&amp;quot;,
   &amp;quot;population&amp;quot; : 1000000},
...
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now data is structured! Magic? No: an evil art! And it drives me – and everyone else who is developing  a client library for this API – literally mad to parse the JSON: each endpoint, in practice, needs a specific JSON parser in order to parse the same data entities, and this introduces complexity into the code. Had the data been structured uniformly across the different endpoints, just one parser would be needed.  &lt;/p&gt;
&lt;h3&gt;HTTP status codes are neglected&lt;/h3&gt;
&lt;p&gt;This is one of the main shortcomings of this API: it does not convey error conditions through a proper use of HTTP status codes. The API users want to receive a 200 (OK) status code in the HTTP response's header – along with data – whenever a GET request is a hit: this means that the endpoint exists and is correctly invoked by the clients; the same way, users want to receive a 4xx or 5xx status code whenever something goes wrong with their request: this can happen for several reasons, either due to clients or the server itself. But, to be short: a user expects a non-200 status code to be returned whenever something goes wrong with its request.  s&lt;/p&gt;
&lt;p&gt;The OWM API &lt;strong&gt;always returns a 200 HTTP status code&lt;/strong&gt;, no matter what happens. But, if something goes wrong with a client's request, it returns the right HTTP status code and an explanation message into the HTTP response's payload! An example: we want to query for current weather on a non-existent location (the folkloristic: "sev082hfrv2qvf2vunr”)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#HTTP request
GET /data/2.5/weather?q=sev082hfrv2qvf2vunr HTTP/1.1
#HTTP response headers
HTTP/1.1 200 OK
Server: nginx
Content-Type: application/json; charset=utf-8
...
#HTTP response payload
{&amp;quot;message&amp;quot;:&amp;quot;Error: Not found city&amp;quot;,&amp;quot;cod&amp;quot;:&amp;quot;404&amp;quot;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The JSON payload is clear: the location has not been found and a 404 (Not Found) error code has been returned. However the code is returned &lt;strong&gt;into the payload&lt;/strong&gt;, so the clients have to first presume that the request was a success, then parse the payload and find out that it wasn't! The API is mis-using the HTTP protocol, which is a very nasty behaviour for clients and &lt;em&gt;blows the API away from RESTfulness&lt;/em&gt;, as well.  &lt;/p&gt;
&lt;h3&gt;"Not found” is different from "Found but no data available”&lt;/h3&gt;
&lt;p&gt;The improper usage of HTTP status codes is particularly problematic in the case of queries to historic weather data registred by meteostations. A meteostation is identified by a unique integer number and when historic data is queried, the API returns a JSON list of data measurements for the desired meteostation. So, an empty list means: no data for the desired meteostation. Now, if I want to get historic data for a station that is not present in the API's meteostations collection (like, say, station number -2147483648), I get:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#HTTP request
GET /data/2.5/history/station?id=-2147483648&amp;amp;type=tick HTTP/1.1
#HTTP response headers
HTTP/1.1 200 OK
Server: nginx
Content-Type: application/json; charset=utf-8
...
#HTTP response payload
{
&amp;quot;message&amp;quot;:&amp;quot;&amp;quot;,
&amp;quot;cod&amp;quot;:&amp;quot;200&amp;quot;,
&amp;quot;type&amp;quot;:&amp;quot;tick&amp;quot;,
&amp;quot;station_id&amp;quot;:-2147483648,
&amp;quot;calctime&amp;quot;:&amp;quot; tick = 0.294 total=0.2954&amp;quot;,
&amp;quot;cnt&amp;quot;:0,
&amp;quot;list&amp;quot;:[]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, a 200 status code (that means: "Ok, everything went smoothly”) and – surprisingly – an empty data list. What I would have expected is a 404 HTTP status code, telling me: "Hey, this station is not listed in my meteostations database”! So in this case, an error condition is wrongly mapped onto a non-error condition. And what if I query for an existing meteostation and it has no data available? How can I discern the "not found” case from the "found but no data available” case?&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">csparpa</dc:creator><pubDate>Tue, 29 Oct 2013 01:00:00 +0100</pubDate><guid>tag:csparpa.github.io,2013-10-29:blog/2013/10/web-apis-design-an-improvable-example.html</guid><category>API</category><category>design</category><category>HTTP</category><category>JSON</category><category>OpenWeatherMap</category><category>PyOWM</category></item><item><title>My first GitHub project</title><link>http://csparpa.github.io/blog/2013/10/my-first-github-project.html</link><description>&lt;p&gt;It's been a while since I wrote here:  lately I've spent a lot of my spare time to organize and code my first  GitHub project ever.  &lt;/p&gt;
&lt;h3&gt;Why an open source project on GitHub?&lt;/h3&gt;
&lt;p&gt;The reasons I decided to setup a GitHub account and launch an open source project are quite simple:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I've been living on the shoulders of the open source community for years and I've always been proud of what it gave me. The best way to be thankful is to give my commitment and code for free to everyone!&lt;/li&gt;
&lt;li&gt;GitHub is a nice place where programmers can show their skills to the world (friends, fellow programmers, potential new employers). I mean: not only coding skills, also organizational and communication skills, as well as mind openness.&lt;/li&gt;
&lt;li&gt;My desire is to use GitHub to link and cohoperate with others like me, sharing my same interests&lt;/li&gt;
&lt;li&gt;I'm sure that open source cohoperation will teach me a lot of things: I have a lot to learn from the code masters&lt;/li&gt;
&lt;li&gt;Last, but not least, it's a good chance to practice with a few languages - first of all, Python&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The PyOWM library&lt;/h3&gt;
&lt;p&gt;So the question was: what will my open source project be about?&lt;br /&gt;
A few minutes after that question raised in my mind I ran into the OpenWeatherMap website, which basically is a web portal disseminating world weather data that are openly contributed by the user community. I noticed that the site provided a data web API, that had been created ages before and, of course, lots of code projects have been popping out since regarding this API. I took a look at the client wrapping libraries that have been created for the API and noticed that no Python client wrapper were mentioned; I also googled a bit and I found that only one attempt of Py-wrapping this API had been made since (pretty rough, not supporting the latest API version and its last commit dates back to more to the beginning of the year).  &lt;/p&gt;
&lt;p&gt;So, it was a deal: a Python client wrapping library that could allow users to interact with the OpenWeatherMap web API via a simple object-oriented model.  &lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/csparpa/pyowm"&gt;PyOWM&lt;/a&gt; library was conceptually born.&lt;/p&gt;
&lt;h3&gt;State of the art&lt;/h3&gt;
&lt;p&gt;I worked hard to shape the library, and now most of the web API features are covered. I've developed it using a Test-Driven approach and keeping it as minimalist as possible. I hope this work will be useful to as many people as possible.  &lt;/p&gt;
&lt;p&gt;Now I need to "sponsorize" my creation with the OpenWeatherMap keepers, the OWM community users and gather help to test and improve the library.  &lt;/p&gt;
&lt;h3&gt;How to contribute&lt;/h3&gt;
&lt;p&gt;Do you want to help my open source project grow? There are infinite ways you can help: report issues, submit new feature requests, test on specific architectures, port to different Python versions, mention it in your blogs/user communities... and of course help in coding if you are able to!  &lt;/p&gt;
&lt;h3&gt;Visit on GitHub&lt;/h3&gt;
&lt;p&gt;Visit the GitHub page of the &lt;a href="http://github.com/csparpa/pyowm"&gt;PyOWM library&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Thank you and cheers! ;-)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">csparpa</dc:creator><pubDate>Mon, 07 Oct 2013 01:00:00 +0200</pubDate><guid>tag:csparpa.github.io,2013-10-07:blog/2013/10/my-first-github-project.html</guid><category>software</category><category>development</category><category>opensource</category><category>GitHub</category><category>PyOWM</category></item><item><title>How to convert VMWare virtual machines to Virtual Box</title><link>http://csparpa.github.io/blog/2013/05/how-to-convert-vmware-virtual-machines-to-virtual-box.html</link><description>&lt;h3&gt;Where I started from&lt;/h3&gt;
&lt;p&gt;This is my situation: I'm on a Windows7 x86 host, and I have an old Ubuntu 10.04 virtual machine with VMWare Tools installed on it.  &lt;/p&gt;
&lt;p&gt;My need is to turn it into an OVF appliance, so that I can run it on Virtual Box, no matter where what architecture it will be run on.&lt;/p&gt;
&lt;h3&gt;Steps&lt;/h3&gt;
&lt;p&gt;This is what I've done:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I made sure (e.g: using VMWare Player or Workstation) that the virtual appliance is powered off;&lt;/li&gt;
&lt;li&gt;Opened a Command Prompt, moved to the VMWare Player/Workstation installation dir and executed the OVF conversion tool. Be aware that this conversion may take some time, depending on how big is your VMX appliance. I did it as follows (replace the paths as needed):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C:\Program Files\VMware\VMware Workstation\OVFTool&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ovftool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exe&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C:\Users\claudio\Documents\Virtual Machines\ubuntu1004\ubuntu1004.vmx&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C:\Users\claudio\Documents\Virtual Machines\converted-to-virtualbox\ubuntu1004.ovf&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;When the conversion process was over, I imported the &lt;code&gt;ubuntu1004.ovf&lt;/code&gt; appliance into Virtual Box by using the &lt;code&gt;File &amp;gt; Import virtual appliance..&lt;/code&gt; menu element and leaving all the defaults;&lt;/li&gt;
&lt;li&gt;Then I booted up the &lt;code&gt;ubuntu1004.ovf&lt;/code&gt; appliance and performed VMWare Tools uninstallation by opening up an SSH shell and executing:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; sudo /usr/bin/vmware-uninstall-tools.pl
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Then I finished the procedure by executing the &lt;code&gt;Device &amp;gt; Install Guest Additions&lt;/code&gt; menu item: a virtual CD is then mounted and I launched the installation process from a shell:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /media/VBOXADDITIONS_4.2.12_84980
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; sudo bash VBoxLinuxAdditions.run
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not as difficult as it may seem…. Hope this helps!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">csparpa</dc:creator><pubDate>Wed, 08 May 2013 01:00:00 +0200</pubDate><guid>tag:csparpa.github.io,2013-05-08:blog/2013/05/how-to-convert-vmware-virtual-machines-to-virtual-box.html</guid><category>VMWare</category><category>Virtualbox</category><category>conversion</category></item><item><title>Command-line software design: 5 more advices</title><link>http://csparpa.github.io/blog/2013/04/command-line-software-design-5-more-advices.html</link><description>&lt;p&gt;Ok, folks, ready to take off with 5 more CLMs (Command-Line Modules) design advices?  This is part II of a posts strip, part I contains the first 5 advices.&lt;/p&gt;
&lt;h3&gt;1. Provide meaningful messages&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;AKA: "What am I doing? I am existing..."&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Your CLM should provide insight into what it is currently doing. The difficult part is to decide how much detail you want to provide to the user...and you might argue: "Ok, but you can always use log level filtering and then let the user decide the verbosity" – this is perfectly right, but I'm talking about on-screen messages. My advice is to print out a specific message which conveys what the CLM is currently doing, with a detail level which should be just enough for the user not to say "It is talking rubbish"! So, what is really vital is that you avoid using simple and generalistic messages like "Computing" or "Executing" and – on the other hand – that you avoid using hyper-detailed expressions such as "Inverting matrix – computing determinant of the 3rd 2×2 submatrix" &lt;em&gt;if they are not meaningful to the user&lt;/em&gt;. Of course if the focus of your CLM is matricial inversion that shall be fine, but it shouldn't be if your CLM is – in example – focused on a higher-level problem which is solved using matricial inversion.  &lt;/p&gt;
&lt;p&gt;...And, please, never print out the raw counters in nested for loops. It happened to me just a couple of days ago to run an image-processing CLM provided by a project partner: this was the output of a successful run  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;claudio@laptop:~&lt;span class="nv"&gt;$ &lt;/span&gt;python img_processing_clm.py input.tif output.tif
Conversion to 8bit took 23.567 seconds
1
2
3
4
5
6
&lt;span class="c"&gt;#2000 or so more lines&lt;/span&gt;
The variance computation took 367.145 seconds
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each and every row index is printed out....It is just irritating!!!&lt;/p&gt;
&lt;h3&gt;2. Gracefully fail&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;AKA: "I don't want to see each blood drop spreading from your wound"&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As a CLM user, would you prefer seeing this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;claudio@laptop:~&lt;span class="nv"&gt;$ &lt;/span&gt;python myclm.py /var/clmdata/testoutdir  &lt;span class="c"&gt;#we are missing the first parameter&lt;/span&gt;
  Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;myclm.py&amp;quot;&lt;/span&gt;, line 3, in &amp;lt;module&amp;gt;
  &lt;span class="nv"&gt;inputfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sys.argv&lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;]&lt;/span&gt;
  IndexError: list index out of range
claudio@laptop:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;..or this?  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;claudio@laptop:~&lt;span class="nv"&gt;$ &lt;/span&gt;python myclm.py /var/clmdata/testoutdir  &lt;span class="c"&gt;#we are missing the first parameter&lt;/span&gt;
  ERROR: you must specify an input file
  Usage:
    myclm.py &amp;lt;inputfile_path&amp;gt; &amp;lt;output_path&amp;gt;
claudio@laptop:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The correct answer would be: none of them! But you can't expect that your CLM is working fine every time. So it is important to let users know what reasons made the CLM stop running. A nice design choice is to detect possible error conditions and treat them so that your CLM "says something of interest" and terminates with a known exit status: this can be done quite easily if you use languages (eg: Java, Python, etc..) that provide formal exception/error handling constructs – in other terms, the usual try/catch blocks.  &lt;/p&gt;
&lt;p&gt;Graceful failures are delightful for the user, but may not the best approach to handle error situations while you are still writing your CLM because they may not give you enough information if you need to debug. So my advice is to add them only when you are pretty sure that you won't make further heavy changes or do any more refactoring on your CLM.&lt;/p&gt;
&lt;h3&gt;3. Organize your CLM folder&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;AKA: "I am the Borg ... I bring order to chaos" (Borg Queen – Star Trek: First Contact)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Order in organizing your code is good. This translates directly into the fact that a well-structured CMS is easy to understand and modify, and can be efficiently used in a small amount of time. My advice is to adhere to widely adopted or standard program folder structuration patterns: I usually have my CLM's folder in this fashion&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;CLM-folder/
  |--bin/     #Binaries: main CLM program and dependancies
  |--doc/     #Documentation about CLM usage/installation
  |--src/     #Source files
  |--static/  #Static data: config files, static inputs, etc.
  `--test/    #Tests
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;4. Minimize filesystem usage and leverage temporary folders&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;AKA: "Forbidden: you don't have enough permissions to write the file"&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As a general advice, don't rely on the safety of filesystem operations. If your CLM needs to store intermediate data try to do that in-memory, and if it's not possible and therefore you are compelled to use the filesystem, your target should be to put the least complexity between your CLM and your data. Reading data from filesystems seldom is a problem, but writing often is, and the amount of adversities you might face depends on a variety of factors such as the architecture (never tried to write in a folder for which you don't have &lt;code&gt;w&lt;/code&gt; permissions?), the possible concurrency in data modification, the remoteness of the target filesystem and so on.  &lt;/p&gt;
&lt;p&gt;Another misused – but smooth and clever – technique is to leverage temporary folder support provided by the operating systems. In my experience with bash programming, I've always seen people doing local computations as follows: input files are copied into the same folder of the executing binaries, then intermediate files are written in that folder (usually, a lot  of files), and in case of successful CLM end intermediate files are deleted. This always made me angry, because often their programs were  buggy and therefore never got to their natural end, which forced me to press &lt;code&gt;CTRL+C&lt;/code&gt;... leaving all of those intermediate files undeleted in the folder. And this meant: I myself would have to delete them!!! :-o To solve this issue, I simply suggested those people to leverage the "mktemp" Linux command, which creates a temporary folder with a pseudo-random name under /tmp and returns its name: one can then use this folder to do whatever she/he likes – i.e. writing the CLM execution's intermediate rubbish.  &lt;/p&gt;
&lt;p&gt;It's as easy as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;claudio@laptop:~&lt;span class="nv"&gt;$ tempdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;mktemp&lt;span class="k"&gt;)&lt;/span&gt;
claudio@laptop:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$tempdir&lt;/span&gt;
/tmp/tmp.hyYKY21864
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;5. Leverage absolute paths&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;AKA: "Time – as well as folder location – is relative"&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When you provide paths as arguments for CLMs it is a very good practice to give them in an absolute fashion. If you give absolute paths, there's a pretty good chance that your CLM  addresses files and folders in the right way. And my advice is: always handle absolute paths internally to your command-line softwares...in fact, this will prevent you from using terrible solutions like the &lt;code&gt;cd&lt;/code&gt; (change directory) command, which will mess the whole thing up if you are using relative paths because the root folder they are resolved against changes!  &lt;/p&gt;
&lt;p&gt;A little coding exercise: let us write a small bash script (copier.bash) that takes reads a file and echoes its contents to a file named &lt;code&gt;results.out&lt;/code&gt; which will be created in a directory of our choice. We want it to have this interface:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;copier.bash &amp;lt;inputfile_path&amp;gt; &amp;lt;output_path&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and here is the code (as you can see I'm using the &lt;code&gt;cat&lt;/code&gt; executable which lies in the &lt;code&gt;/bin&lt;/code&gt; path on my Linux system):  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;inputfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;outputdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$2&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;bindir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin&amp;quot;&lt;/span&gt;

&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$bindir&amp;quot;&lt;/span&gt;
cat &lt;span class="s2"&gt;&amp;quot;$inputfile&amp;quot;&lt;/span&gt; &amp;gt; &lt;span class="s2"&gt;&amp;quot;$outputdir/result.out&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now if we setup the environment like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;claudio@laptop:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /opt/copier
claudio@laptop:~&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir output  &lt;span class="c"&gt;#we create the output folder&lt;/span&gt;
claudio@laptop:~&lt;span class="nv"&gt;$ &lt;/span&gt;tree .
.
|-- copier.bash
&lt;span class="sb"&gt;`&lt;/span&gt;-- output
1 directory, 1 file
claudio@laptop:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;italia has got talent&amp;quot;&lt;/span&gt; &amp;gt; input.txt &lt;span class="c"&gt;#we create the input file&lt;/span&gt;
claudio@laptop:~&lt;span class="nv"&gt;$ &lt;/span&gt;bash copier.bash input.txt output        &lt;span class="c"&gt;#we run the script&lt;/span&gt;
copier.bash: line 9: output/result.out: No such file or directory
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As we expected, the &lt;code&gt;cd&lt;/code&gt; inside our script is messing up everything and the bash shell is complaining about the fact that after it, it is impossible to find the &lt;code&gt;output&lt;/code&gt; subfolder (which, in absolute terms, is: &lt;code&gt;/bin/output&lt;/code&gt; !!!)  &lt;/p&gt;
&lt;p&gt;Also the following command-line fail:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;claudio@laptop:~&lt;span class="nv"&gt;$ &lt;/span&gt;bash copier.bash input.txt /opt/copier/output
cat: input.txt: No such file or directory
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This time it's the &lt;code&gt;cat&lt;/code&gt; executable complaining for the missing &lt;code&gt;input.txt&lt;/code&gt; file, which it expects to be here: &lt;code&gt;/bin/input.txt&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;The right way of running this script would be:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;claudio@laptop:~&lt;span class="nv"&gt;$ &lt;/span&gt;bash copier.bash /opt/copier/input.txt /opt/copier/output
claudio@laptop:~&lt;span class="nv"&gt;$ &lt;/span&gt;cat output/result.out
italia has got talent
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can see that: one must know in advance that absolute paths must be used. And consider that we were lucky to have a textual CLM, what if we had a compiled one? Lesson learn: never use &lt;code&gt;cd&lt;/code&gt; and leverage absolute paths!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">csparpa</dc:creator><pubDate>Thu, 18 Apr 2013 01:00:00 +0200</pubDate><guid>tag:csparpa.github.io,2013-04-18:blog/2013/04/command-line-software-design-5-more-advices.html</guid><category>software</category><category>design</category><category>shell</category></item><item><title>How to deploy Flask applications to Apache webserver</title><link>http://csparpa.github.io/blog/2013/03/how-to-deploy-flask-applications-to-apache-webserver.html</link><description>&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;This is a simple guide explaining how I managed to configure Apache 2.2 httpd server on a Windows 2012 server platform so that it can serve a Python webapplication I wrote using the &lt;a href="http://flask.pocoo.org/"&gt;Flask micro-framework&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;The guide is valid, with a very little modification, also on Linux environments (you geeks know how to do)&lt;/p&gt;
&lt;h3&gt;Why I needed to to this&lt;/h3&gt;
&lt;p&gt;I developed this application at work and I‘ve been serving it from the beginning via the Flask's built-in minimal webserver: unfortunately this  is not enough for production stage as I need a more robust server with SSL capabilities, which Flask's has not. This was my first time in deploying a Python webapp... So, after googling a bit and reading the &lt;a href="http://flask.pocoo.org/docs/deploying/"&gt;Flask deployment notes&lt;/a&gt;, I came up with the answer: what I needed was a WSGI-compliant server running on my target platform, a Windows 2012 server. The natural choice to me was to enable the WSGI module on the "good ole" Apache webserver, which I'm experienced with.&lt;/p&gt;
&lt;h3&gt;Steps&lt;/h3&gt;
&lt;h4&gt;1. Flask app&lt;/h4&gt;
&lt;p&gt;We choose a folder in which we place the Python code. For instance,  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;D:&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;webapps&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this folder we create the real Flask webapplication that we want to deploy (file &lt;code&gt;test.py&lt;/code&gt;):  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# test.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Hello &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;!&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Apache server won't be aware of &lt;code&gt;test.py&lt;/code&gt; at all. What you need to do now is to write in the same folder a Python file named &lt;code&gt;test.wsgi&lt;/code&gt; that we will link into the webserver's configuration: the code in this file will import the main Flask application object (built in our case as a singleton) and will be actually executed by the WSGI module of Apache. In the code, it is vital that you DON'T change the name of the "application" variable, as it is exactly what the server expects to find. Also please note that we are extending the Python classes path to include our own webapplication's folder.  &lt;/p&gt;
&lt;p&gt;This is &lt;code&gt;test.wsgi&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# test.wsgi&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="c"&gt;#Expand Python classes path with your app&amp;#39;s path&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d:/webapps/test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;test&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

&lt;span class="c"&gt;#Put logging code (and imports) here ...&lt;/span&gt;

&lt;span class="c"&gt;#Initialize WSGI app object&lt;/span&gt;
&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As an additional remark, if you want to put any logging code (e.g: file/e-mail/console loggers) into your Flask app, you must put it before the &lt;code&gt;if __name__ == ‘__main__'&lt;/code&gt; block, otherwise it won't log anything! Add your loggers to the app object.  &lt;/p&gt;
&lt;p&gt;More on this on the &lt;a href="http://flask.pocoo.org/docs/0.10/api/#flask.Flask.logger"&gt;Flask documentation&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;2. Apache setup&lt;/h4&gt;
&lt;p&gt;Ok, what's next? Now it's all about installing and properly configuring Apache.&lt;/p&gt;
&lt;p&gt;First: install Apache webserver. I &lt;a href="http://apache.panu.it//httpd/binaries/win32/httpd-2.2.22-win32-x86-openssl-0.9.8t.msi"&gt;downloaded&lt;/a&gt; and executed the .msi installer. Apache was installed at:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;quot;C:\Program Files (x86)\Apache Software Foundation\Apache2.2&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Second: install the WSGI Apache module. Pay attention to download the module compiled for your specific combination of platform and Python and Apache versions: I downloaded &lt;a href="https://code.google.com/p/modwsgi/downloads/detail?name=mod_wsgi-win32-ap22py27-3.3.so"&gt;this module&lt;/a&gt;. Once downloaded, rename the &lt;code&gt;.so&lt;/code&gt; file into &lt;code&gt;mod_wsgi.so&lt;/code&gt; and put it under the &lt;code&gt;modules&lt;/code&gt; subfolder of your Apache installation folder. Then you have to tell Apache to use it: open in a text editor the &lt;code&gt;httpd.config&lt;/code&gt; file which is under the &lt;code&gt;conf&lt;/code&gt; subfolder and add the following line at the bottom:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;LoadModule wsgi_module modules/mod_wsgi.so
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Third: restart Apache.&lt;/p&gt;
&lt;p&gt;Now Apache is ready to serve WSGI webapplications.  &lt;/p&gt;
&lt;p&gt;What is left to do is to tell about where our application is and match it to a URL alias. It's child's play: open in a text editor the &lt;code&gt;httpd.config&lt;/code&gt; file we used before and add these lines to the bottom:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;lt;Directory d:/webapps/test&amp;gt;
    Order allow,deny
    Allow from all
&amp;lt;/Directory&amp;gt;
WSGIScriptAlias /flasktest d:/webapps/test/test.wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(nevertheless, I prefer to place the per-virtual-host or per-alias configurations' stuff into separate files and then use an Include directive into the main &lt;code&gt;httpd.conf&lt;/code&gt;).  &lt;/p&gt;
&lt;p&gt;Now restart Apache again and if you open a browser and point it to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;http://localhost/flasktest/hello?name=claudio
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and you should see the webapp's greetings!&lt;/p&gt;
&lt;h3&gt;Further references&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.google.com/p/modwsgi/wiki/QuickConfigurationGuide"&gt;This guide&lt;/a&gt; helped me a lot in understanding how to setup Apache WSGI.&lt;/li&gt;
&lt;li&gt;I also found &lt;a href="https://beagle.whoi.edu/redmine/projects/ibt/wiki/Deploying_Flask_Apps_with_Apache_and_Mod_WSGI?version=3"&gt;this tutorial&lt;/a&gt; which is far more comprehensive than mine and covers Flask deployment on Apache on Debian/Ubuntu environments&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">csparpa</dc:creator><pubDate>Wed, 06 Mar 2013 01:00:00 +0100</pubDate><guid>tag:csparpa.github.io,2013-03-06:blog/2013/03/how-to-deploy-flask-applications-to-apache-webserver.html</guid><category>software</category><category>webserver</category><category>webapps</category><category>Python</category><category>Flask</category></item><item><title>Hamletic Javascript</title><link>http://csparpa.github.io/blog/2013/02/hamletic-javascript.html</link><description>&lt;p&gt;&lt;img alt="Hamletic Javascript" src="/blog/img/hamletic-javascript.png" title="Hamletic Javascript" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">csparpa</dc:creator><pubDate>Fri, 22 Feb 2013 01:00:00 +0100</pubDate><guid>tag:csparpa.github.io,2013-02-22:blog/2013/02/hamletic-javascript.html</guid><category>software</category><category>Javascript</category><category>humour</category></item><item><title>Server is unwilling to perform</title><link>http://csparpa.github.io/blog/2013/01/server-is-unwilling-to-perform.html</link><description>&lt;p&gt;&lt;img alt="Server is unwilling to perform" src="/blog/img/server-unwilling.png" title="Server is unwilling to perform" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">csparpa</dc:creator><pubDate>Fri, 11 Jan 2013 01:00:00 +0100</pubDate><guid>tag:csparpa.github.io,2013-01-11:blog/2013/01/server-is-unwilling-to-perform.html</guid><category>software</category><category>LDAP</category><category>humour</category></item><item><title>Command-line software design: 5 advices</title><link>http://csparpa.github.io/blog/2012/12/command-line-software-design-5-advices.html</link><description>&lt;p&gt;During the last years I developed several command-line utility tools, using several languages and for different environments. Attempts, learning and – of course – errors led me to clear my mind up and to adopt a series of design guidelines which I find very useful for any kind of command-line tool development – ranging from the simplest script to the most articulated modules – and which I'm willing to share. As you'll notice, the guidelines can be generalized, as they simply represent common sense approaches in SW design!  &lt;/p&gt;
&lt;p&gt;Here I'm reporting just a few in "humurous" terms :-) (I'll share more with you in future posts as they come out from oblivion).  &lt;/p&gt;
&lt;p&gt;From now on, CLM = Command Line Module&lt;/p&gt;
&lt;h3&gt;1. Provide a synopsis describing the module's purposes&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;AKA: "What am I supposed to do with you, weird little script?"&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It might sound strange but one of the most recurring difficulties I've ever had when using CLM written by others (fellow workers, project partners) is to understand what they actually do. As all lazy users, I hate asking people what is the aim of a CLM and the last thing on Earth for discovering would be looking at the code itself! That's the reason why I always put a "synopsis" in my CLMs' help messages and comment headers, just like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;help_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;    WORDSCOUNTER.py&lt;/span&gt;
&lt;span class="s"&gt;    Synopsis:&lt;/span&gt;
&lt;span class="s"&gt;        counts the number of words contained into the provided&lt;/span&gt;
&lt;span class="s"&gt;        input file and prints it on standard output&lt;/span&gt;
&lt;span class="s"&gt;    Usage:&lt;/span&gt;
&lt;span class="s"&gt;        python wordscounter.py &amp;lt;input_file&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;    [...]&lt;/span&gt;
&lt;span class="s"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This way, I'm just letting users – and you yourself could be among them – know exactly what my CLM is going to do, and save them a lot of headaches. This state of intentions is also useful for you as a developer, as you could use it as a top-down problem analysis trace to go through when coding down your CLM. Had your CLM any side effect (eg: modify files, erase DB tables, etc), let the users know via the synopsis as well. Provide a short and effective synopsis.  &lt;/p&gt;
&lt;h3&gt;2. Minimize the module's responsibilities&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;AKA: "Largo al factotum" [air from Gioacchino Rossini's "Il Barbiere di Siviglia", scene II, act I]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As you certainly know, OOP teaches to identify programming units (classes) by spotting single responsibilities into the program's main frame. This means that a class should go with one – and possibly only one – responsibility: this helps writing clean, testable and well-designed code. This should be our aim when designing and coding ANY piece of software, also CLMs: the piece of software should do just one thing, and in the best possible way. In the world of CLMs, things tend to get a little bit fuzzy when complexity grows up, as CMLs are meant as a quick tools to accomplish multiple repetitive and boring tasks – therefore the word "multiple" here is not handshaking with OOP dogmas at all.  &lt;/p&gt;
&lt;p&gt;So, what to do? I firmly believe that our code should not behave like Figaro in "Il Barbiere di Siviglia": it should not be meant to do everything!!! Please consider the pluses of modular software: reusability, ease of use, composability, testability…in a single word: quality!  &lt;/p&gt;
&lt;p&gt;My personal advice is that you code complex CLMs using a top-down approach which – in a way – resembles OOP's one. You should first try to break down your main task into sub-steps and then code each sub-step into a separate CLM or into a separate function of your main CLM (it's up to you to decide which approach is the best one, depending also on the programming language you are using).  Functions and small scripts are easy to be called, can be tested and documented on their own; functions can be collected into libraries and imported by client codes, as well as small scripts can be used stand-alone or can be imported by bigger modules.  &lt;/p&gt;
&lt;p&gt;By the way, I usually don't rely on OOP when coding simple or medium-complexity CLMs, but there are cases when this is more than an advantage.&lt;/p&gt;
&lt;h3&gt;3. Provide open interfaces&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;AKA: "Dont' work out of my sight"&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I recently worked on a Python wrapper for a complicated .exe file, let's call it example.exe. This executable takes a few parameters, runs an algorithm and finally outputs 3 different curves in a tabular format. This module was provided me as a Commercial-Off-The-Shelf, which means that I could not modify it nor I have its source code.  &lt;/p&gt;
&lt;p&gt;They told me: "It's so easy! You just need to invoke the executable using this command-line:"&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:\&amp;gt; example.exe
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I could already smell that lots of work would be needed. The following questions came instantly to my mind:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;how can I state the CLM's inputs? what are they, files, strings, directories? how many of them? in which order?&lt;/li&gt;
&lt;li&gt;how can I state the CLM's outputs? what are they, files, strings, directories? how many of them? in which order?&lt;/li&gt;
&lt;li&gt;is the CLM going to need additional configuration resources (eg: files)?&lt;/li&gt;
&lt;li&gt;is the CLM going to write logfiles or other kinds of additional resources? how can I state them?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ok, let's put an end to the tale: I investigated a little bit further and discovered that example.exe was reading an input file containing lots of parameters (many of them were optional) and wrote the output data into a file which was arbitrarily put into the .exe's folder and whose name was arbitrarily given. This is a complete mess! This crap needs wrapping and its creators need to be publicly humiliated!  &lt;/p&gt;
&lt;p&gt;This is the typical situation when the CLM does not have an open interface. I'm referring to "interface" of the CLM as to the way you can launch it by a certain enviroment (bash shell, python interpreter, command prompt, etc): as a user, your desire is to provide all of the input stuff to your module and obtain all of the output stuff you EXPECT. And this is where many CLMs fall.  &lt;/p&gt;
&lt;p&gt;You should always provide open interfaces: this means that your CLM should not use or write anything without letting you explicitly specifying it! So, my advice is that you design your CLM's interface clearly using the following best practices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;specifiy all the parameters (even if you end with a long command-line, don't worry)&lt;/li&gt;
&lt;li&gt;when giving names to parameters, try to provide meaningful and speficific designations  so that users can instantly understand what a parameter name stands for&lt;/li&gt;
&lt;li&gt;the interface should accept the least information letting the module work (no unuseful info!)&lt;/li&gt;
&lt;li&gt;avoid duplicating parameters: don't provide many times the same value (especially under different names: that would be ugly to discover)&lt;/li&gt;
&lt;li&gt;input parameters come first, output parameters come after inputs&lt;/li&gt;
&lt;li&gt;logfiles come at the end and could also be omitted – as the runtime environments (eg: bash, prompt) provide ways redirect messages to files&lt;/li&gt;
&lt;li&gt;configfiles come at the end as well: use them only if you have a high number of parameters (tens)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4. Provide help&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;AKA: "No one can hear you cry in space"&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;"Ok, I'm willing to launch this fucking CLM but I really don't know how to…where are the docs? Oh damn, they just gave me the binary, no documentation…so what do I do now?" How many times did you think something similar to this?  &lt;/p&gt;
&lt;p&gt;No one should cry loud in the dark in order to get help (which – more than often – won't come), because every CLM should have a help switch! It's such a simple and wise trick: embed in your CLM one or more help strings that can help users to know how to invoke execution. The more is the help message verbose, the better for your user. I suggest you to include in your help messages the following sections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Synopsis – (see Advice n.1)&lt;/li&gt;
&lt;li&gt;Usage  - how to launch the CLM, in other words the command-line interface along with parameters explanation)&lt;/li&gt;
&lt;li&gt;Usage examples [optional] – two or three command-line invocation examples&lt;/li&gt;
&lt;li&gt;Prerequisites – anything your CLM is relying on…watch out: don't exceed with them. If something goes wrong and one or more prerequisites are missing, your module must signal this lack using exit codes&lt;/li&gt;
&lt;li&gt;Help switch [optional] – tells how to print the help message&lt;/li&gt;
&lt;li&gt;Exit codes – a list of error conditions your CLM could encounter. Each category has an associated number (zero is reserved for successful execution)&lt;/li&gt;
&lt;li&gt;Authors, Copyright [optional] – if you really want/need to sign your "creation"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this point, one should ask herself/himself: "Ok, when I execute it for the first time, how can I know how to print the help message?". This question should be answered by making as simple as possible the printing of help message by the users. So, I suggest to provide help messages whenever a user provides no parameters to your CLM (only – of course – if your CLM do have one or more parameters) or whenever switches such as &lt;code&gt;[ help | -help | h | -h | /? ]&lt;/code&gt; are provided.  &lt;/p&gt;
&lt;p&gt;Example of help message in Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;help_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;   WORDSCOUNTER.py&lt;/span&gt;
&lt;span class="s"&gt;   Synopsis:&lt;/span&gt;
&lt;span class="s"&gt;     counts the number of words contained into the provided&lt;/span&gt;
&lt;span class="s"&gt;     input file and prints it on standard output&lt;/span&gt;
&lt;span class="s"&gt;   Usage:&lt;/span&gt;
&lt;span class="s"&gt;     python wordscounter.py &amp;lt;input_file&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;   Parameters:&lt;/span&gt;
&lt;span class="s"&gt;     &amp;lt;input_file&amp;gt; = the text file whose words are to be counted&lt;/span&gt;
&lt;span class="s"&gt;   Help:&lt;/span&gt;
&lt;span class="s"&gt;     you can print this message using one of the followings&lt;/span&gt;
&lt;span class="s"&gt;     python wordscounter.py&lt;/span&gt;
&lt;span class="s"&gt;     python wordscounter.py [ help | /? ]&lt;/span&gt;
&lt;span class="s"&gt;   Exit codes:&lt;/span&gt;
&lt;span class="s"&gt;    -1 - showed help&lt;/span&gt;
&lt;span class="s"&gt;     0 - successful execution&lt;/span&gt;
&lt;span class="s"&gt;     1 - input file does not exist&lt;/span&gt;
&lt;span class="s"&gt;     2 - input file is not a file&lt;/span&gt;
&lt;span class="s"&gt;     3 - input file is not a text file&lt;/span&gt;
&lt;span class="s"&gt;    90 - internal error&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;help_msg&lt;/span&gt;
  &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;help&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;help_msg&lt;/span&gt;
  &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;5. Tell the user what is happening&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;AKA: "It's thinking, I will have a cofee in the meantime"&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;How many times I started a CLM with a terminal looking like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;claudio@laptop:~&lt;span class="nv"&gt;$ &lt;/span&gt;bash install.bash package.tar.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and after minutes or tens of minutes the terminal looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;claudio@laptop:~&lt;span class="nv"&gt;$ &lt;/span&gt;bash install.bash package.tar.gz
claudio@laptop:~&lt;span class="err"&gt;$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How many times? Countless! This is because the module is not telling me what it is currently doing. This way, I can not state how much it will take for it to complete the task, I can not even know whether it's performing well or not and I can not know at which stage of the whole computation it is running… I can not schedule my time, as I depend on the module's outputs, therefore I will be less productive!  &lt;/p&gt;
&lt;p&gt;So the basic advice is: whenever the tool starts to do something new (e.g: enters a specific computational stage, starts parsing parameters, writing output files or inverting matrices or whatever) please print something onscreen and/or onto a logfile. This will save a lot of headaches to the CLM's users and it will be easy also for recognize that bugs are coming (such as execution stuck into infinite loops). I suggest you to make your CLM verbose, but not  "gossipy": you don't have to make it echo out every single line of code that is executed (and if you really need to, use something like: &lt;code&gt;bash -x&lt;/code&gt;)  &lt;/p&gt;
&lt;p&gt;Another idea is to make your CLM print the amount of work (percentage?) done against the overall, better if along with a gross estimation of the time needed to complete the task: this is very useful when dealing with long-running tasks such as matrices inversion, recursive algorithms, and so on.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">csparpa</dc:creator><pubDate>Mon, 10 Dec 2012 01:00:00 +0100</pubDate><guid>tag:csparpa.github.io,2012-12-10:blog/2012/12/command-line-software-design-5-advices.html</guid><category>software</category><category>design</category><category>shell</category></item><item><title>httpbin</title><link>http://csparpa.github.io/blog/2012/11/httpbin.html</link><description>&lt;p&gt;The following ones are very useful tools for testing HTTP clients:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://httpbin.org"&gt;http://httpbin.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://httpbin.org"&gt;https://httpbin.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">csparpa</dc:creator><pubDate>Thu, 15 Nov 2012 01:00:00 +0100</pubDate><guid>tag:csparpa.github.io,2012-11-15:blog/2012/11/httpbin.html</guid><category>software</category><category>development</category><category>API</category><category>webapps</category><category>testing</category></item><item><title>How to install MongoDB on Windows as a service</title><link>http://csparpa.github.io/blog/2012/10/how-to-install-mongodb-on-windows-as-a-service.html</link><description>&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;I’m showing you a quick procedure to install MongoDB as a service on Windows platforms (I simply gathered the hints explained in the &lt;a href="http://www.mongodb.org/display/DOCS/Windows"&gt;official documentation page&lt;/a&gt; and adapted the whole stuff to my specific case).  &lt;/p&gt;
&lt;h3&gt;Requirements&lt;/h3&gt;
&lt;p&gt;In my example, I’m installing MongoDB version 2.2.0 on a Windows Server 2003 R2 machine and my goal is to have it available as a service.  &lt;/p&gt;
&lt;h3&gt;Steps&lt;/h3&gt;
&lt;p&gt;The procedure is pretty straightforward: all you need is to setup the path in which MongoDB will physically store the data collections, to provide a logfile for the service we’re going to create and finally to tell the &lt;code&gt;mongod&lt;/code&gt; daemon to run as a service.  &lt;/p&gt;
&lt;p&gt;Here we go (be sure to enclose all the paths in double quotes if they contain spaces):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Download the installation package (a .zip archive) and decompress it into folder &lt;code&gt;C:\mongodb-2.2.0&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create the data path folders (in my example, &lt;code&gt;C:\mongodb-2.2.0\data\db&lt;/code&gt;):&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:\&amp;gt; md C:\mongodb-2.2.0\data
C:\&amp;gt; md C:\mongodb-2.2.0\data\db
C:\&amp;gt; set datapath = C:\mongodb-2.2.0\data\db
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Setup mongod configuration file path (my file is &lt;code&gt;C:\mongodb-2.2.0\mongod.cfg&lt;/code&gt;):&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:\&amp;gt; set configpath = C:\mongodb-2.2.0\mongod.cfg
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Create the folder that will host the service's log file (my folder is &lt;code&gt;C:\mongodb-2.2.0\log&lt;/code&gt;) and write its path into the config file:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:\&amp;gt; md C:\mongodb-2.2.0\log
C:\&amp;gt; echo logpath = C:\mongodb-2.2.0\log\mongod.log &amp;gt; C:\mongodb-2.2.0\mongod.cfg
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Install &lt;code&gt;mongod&lt;/code&gt; as a service:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:\&amp;gt; C:\mongodb-2.2.0\bin\mongod.exe --config %configpath% --dbpath %dbpath% --install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can start/stop/remove the MongoDB service via the services administration graphical interface, or via the command line using the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;:: Start service
C:\&amp;gt; net start MongoDB

:: Stop service
C:\&amp;gt; net stop MongoDB

:: Uninstall the service
C:\&amp;gt; C:\mongodb-2.2.0\bin\mongod.exe --remove
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Wanna test out your installation? Just call the MongoDB Javascript shell:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:\&amp;gt; C:\mongodb-2.2.0\bin\mongo.exe
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and if no error message appears – have fun!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">csparpa</dc:creator><pubDate>Mon, 29 Oct 2012 01:00:00 +0100</pubDate><guid>tag:csparpa.github.io,2012-10-29:blog/2012/10/how-to-install-mongodb-on-windows-as-a-service.html</guid><category>software</category><category>NoSQL</category><category>database</category><category>Windows</category><category>MongoDB</category></item><item><title>Installing Android 4.1 Jelly Bean on LG Optimus One (LG P500)</title><link>http://csparpa.github.io/blog/2012/09/installing-android-4-1-jelly-bean-lg-optimus-one.html</link><description>&lt;h3&gt;A Happy LG Optimus One owner’s story&lt;/h3&gt;
&lt;p&gt;I’m a happy owner of an LG Optimus One: not only because it proved many times to be a performing device, but also because – a few days after I bought it – I managed to replace the custom Android it had on board (themed by TIM: ugly!!!) with a simple and plain Android 2.2.1 Froyo stock ROM. This I did, despite many warnings I read about phone brick and license invalidation. About six-months after, I had the same fever and replaced Froyo with Gingebread: no problems this time, as well.  &lt;/p&gt;
&lt;p&gt;Last monday, after reading that someone (&lt;a href="http://aokp.co/"&gt;Android Open Kang Project&lt;/a&gt; team) built an unoffical Android 4.1 Jelly Bean port for LG Optimus One, I took a fancy to it…”Danger is my business” – I thought. So, let’s go replace my current Android with the one on the crest of waves!!!  &lt;/p&gt;
&lt;p&gt;I am reporting the steps I followed: they took about 3 hours, considering also the conclusive phone re-configuration and apps re-install.  &lt;/p&gt;
&lt;p&gt;Result: a fresh and fluid install on my Optimus One!&lt;/p&gt;
&lt;h3&gt;READ THIS: DEATH DANGER ;-)&lt;/h3&gt;
&lt;p&gt;Please, don’t take what you’re gonna read as a serious guide to modding (you can find tons of forum posts on sites such as xda): the following steps were just conceived to provide a big and fuzzy idea of what it takes to perform such an install, it’s up to you to search for details!  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You’re warned: I won’t be responsible for any danger to your phone or parts of it in case you follow the procedure and come up with a brick or malfunctionings!&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Requirements&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;My phone before installing Jelly Bean&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android version: gingerbread 2.3.3&lt;/li&gt;
&lt;li&gt;kernel: 2.6.35.10-perf&lt;/li&gt;
&lt;li&gt;baseband: V20g&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ROM about to be installed:&lt;/strong&gt; Android 4.1 Jelly Bean unofficial port for LGp500. The porting is by &lt;a href="http://aokp.co/"&gt;Android Open Kang Project&lt;/a&gt;. The ROM version is the nightly build of  Septembre, 9 2012  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SW to be obtained:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android 4.1 ROM: &lt;a href="http://www.mediafire.com/?db1my6sftk27jkw"&gt;http://www.mediafire.com/?db1my6sftk27jkw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;gapps: &lt;a href="http://goo.im/gapps/gapps-ics-20120429-signed.zip"&gt;http://goo.im/gapps/gapps-ics-20120429-signed.zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://matrixrewriter.com/android/"&gt;Titanium Backup&lt;/a&gt; for backing up phone apps state&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Web resources to be read:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flashing ROMS on LGP500 guide: &lt;a href="http://forum.cyanogenmod.com/topic/41965-lg-optimus-one-complete-flashing-guide"&gt;http://forum.cyanogenmod.com/topic/41965-lg-optimus-one-complete-flashing-guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Android 4.x ROMs for LGP500: &lt;a href="http://droidviews.com/2012/lg-p500-best-ics-roms-series-part-5"&gt;http://droidviews.com/2012/lg-p500-best-ics-roms-series-part-5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;XDA thread for flashing AOKP ROM: &lt;a href="http://forum.xda-developers.com/showthread.php?p=25182021#post25182021"&gt;http://forum.xda-developers.com/showthread.php?p=25182021#post25182021&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; you need to have superuser access to your phone (if you don’t, install the &lt;a href="http://androidsu.com/superuser/"&gt;Superuser&lt;/a&gt; app)  &lt;/p&gt;
&lt;h3&gt;Steps&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Copied Android 4.1 ROM and gapps .zip archives into the root folder of the SD card&lt;/li&gt;
&lt;li&gt;Installed ROM Manager via Google Play store&lt;/li&gt;
&lt;li&gt;Backupped all applications using Titanium Backup and then copied backups on PC&lt;/li&gt;
&lt;li&gt;Backupped personal data and contacts on PC using LG PC Suite 4&lt;/li&gt;
&lt;li&gt;Backupped current ROM using ROM manager and then copied backup on PC&lt;/li&gt;
&lt;li&gt;Installed ClockworkMod using ROM manager&lt;/li&gt;
&lt;li&gt;Rebooted phone in recovery mode&lt;/li&gt;
&lt;li&gt;Made a factory reset/wipe&lt;/li&gt;
&lt;li&gt;Flashed the Android 4.1 ROM from the .zip archive on the SD card&lt;/li&gt;
&lt;li&gt;Flashed the gapps from the .zip archive on the SD card&lt;/li&gt;
&lt;li&gt;Rebooted phone&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hope this helps for all of you who whish to try out Jelly Bean on LG Optimus One!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">csparpa</dc:creator><pubDate>Wed, 19 Sep 2012 01:00:00 +0200</pubDate><guid>tag:csparpa.github.io,2012-09-19:blog/2012/09/installing-android-4-1-jelly-bean-lg-optimus-one.html</guid><category>software</category><category>Android</category><category>modding</category><category>mobile</category></item><item><title>How to install MongoDB on Ubuntu</title><link>http://csparpa.github.io/blog/2012/07/how-to-install-mongodb-on-ubuntu.html</link><description>&lt;p&gt;This is a quick-guide to install MongoDB on Ubuntu 12.04 (if you want to know how to install it also on Fedora Core 11, please check out one of my old posts.  &lt;/p&gt;
&lt;h3&gt;Steps&lt;/h3&gt;
&lt;p&gt;Here is all you have to do:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; sudo apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; sudo touch /etc/apt/sources.list.d/10gen.list
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$(echo &amp;quot;&lt;/span&gt;deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen&lt;span class="s2"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; sudo &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$line&amp;quot;&lt;/span&gt; &amp;gt; /etc/apt/sources.list.d/10gen.list
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; sudo apt-get update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then you can install MongoDB with:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; sudo apt-get install mongodb-10gen
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Enjoy!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">csparpa</dc:creator><pubDate>Mon, 09 Jul 2012 01:00:00 +0200</pubDate><guid>tag:csparpa.github.io,2012-07-09:blog/2012/07/how-to-install-mongodb-on-ubuntu.html</guid><category>Linux</category><category>NoSQL</category><category>MongoDB</category><category>database</category><category>Ubuntu</category></item><item><title>The yes command</title><link>http://csparpa.github.io/blog/2012/06/the-yes-command.html</link><description>&lt;p&gt;The dumbest "yes-man" Linux command: &lt;code&gt;yes&lt;/code&gt;!  &lt;/p&gt;
&lt;p&gt;It has only one aim: to continuously repeat what you tell it. Useful if pipelined with interactive cmd line installers (where you usually have to type &lt;code&gt;y&lt;/code&gt; a lot of times in order to accept the default values) and similar boring operations.  &lt;/p&gt;
&lt;p&gt;So, for example if you go with:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; yes &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;it keeps on printing the cmd line arguments followed by a new line character (&lt;code&gt;CTRL+C&lt;/code&gt; to stop execution):  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;test&lt;/span&gt;
&lt;span class="nb"&gt;test&lt;/span&gt;
&lt;span class="nb"&gt;test&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;... and if you do not specify any argument, it just says:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;y
y
y
y
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yes, man! :-)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">csparpa</dc:creator><pubDate>Fri, 22 Jun 2012 01:00:00 +0200</pubDate><guid>tag:csparpa.github.io,2012-06-22:blog/2012/06/the-yes-command.html</guid><category>Linux</category><category>shell</category></item><item><title>How to install MongoDB on Fedora</title><link>http://csparpa.github.io/blog/2012/03/how-to-install-mongodb-on-fedora.html</link><description>&lt;p&gt;During the last days, I've been delving into NoSQL datastores study and now I've got the chance to use MongoDB for a real-life need (of course, something relating to work issues). In order to reach my target, I needed a fresh installation of one of the most promising NoSQL technologies: the document-oriented datastore MongoDB.  &lt;/p&gt;
&lt;h3&gt;Requirements&lt;/h3&gt;
&lt;p&gt;Here is how I managed to install MongoDB 2.0.3 on a Fedora Core 11 host. You can easily adapt the steps I went through to your operational environment.  &lt;/p&gt;
&lt;p&gt;We're about to issue every command as &lt;code&gt;root&lt;/code&gt; user.  &lt;/p&gt;
&lt;h3&gt;Steps&lt;/h3&gt;
&lt;p&gt;First, I downloaded, extracted and placed the Mongo stuff (I didn't use the 10gen repo, but just a &lt;code&gt;tar.gz&lt;/code&gt; from MongoDB website):  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /opt
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; wget http://fastdl.mongodb.org/linux/mongodb-linux-i686-2.0.3.tgz
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; tar xvf mongodb-linux-i686-2.0.3.tgz
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; mv mongodb-linux-i686-2.0.3.tg mongodb-2.0.3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I decided that my databases would go under &lt;code&gt;/usr/data/mongodb&lt;/code&gt; and that MongoDB log file would be &lt;code&gt;/var/log/mongodb.log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As I wanted my MongoDB server instance to be started/stopped as a demon, I prepared the following &lt;code&gt;init.d&lt;/code&gt; script named &lt;code&gt;mongodb&lt;/code&gt; and placed it under &lt;code&gt;/etc/init.d/&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; /etc/rc.d/init.d/functions
&lt;span class="nv"&gt;prog&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mongod&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;mongod&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/opt/mongodb-2.0.3/bin/mongod&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;RETVAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0

start&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;$&amp;quot;Starting $prog: &amp;quot;&lt;/span&gt;
  &lt;span class="c"&gt;#This is the fundamental call to start the MongoDB server instance&lt;/span&gt;
  daemon &lt;span class="nv"&gt;$mongod&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--fork --journal --dbpath /usr/data/mongodb \&lt;/span&gt;
&lt;span class="s2"&gt;  --logpath /var/log/mongodb.log \&lt;/span&gt;
&lt;span class="s2"&gt;  --logappend 2&amp;amp;gt;&amp;amp;amp;1 &amp;amp;gt;&amp;amp;gt;/var/log/mongodb.log&amp;quot;&lt;/span&gt;
  &lt;span class="nv"&gt;RETVAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt;
  &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$RETVAL&lt;/span&gt; -eq 0 &lt;span class="o"&gt;]&lt;/span&gt; &amp;amp;amp;&amp;amp;amp; touch /var/lock/subsys/&lt;span class="nv"&gt;$prog&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$RETVAL&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

stop&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;$&amp;quot;Stopping $prog: &amp;quot;&lt;/span&gt;
  killproc &lt;span class="nv"&gt;$prog&lt;/span&gt;
  &lt;span class="nv"&gt;RETVAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt;
  &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$RETVAL&lt;/span&gt; -eq 0 &lt;span class="o"&gt;]&lt;/span&gt; &amp;amp;amp;&amp;amp;amp; rm -f /var/lock/subsys/&lt;span class="nv"&gt;$prog&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$RETVAL&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$1&amp;quot;&lt;/span&gt; in
 start&lt;span class="o"&gt;)&lt;/span&gt;
  start
  ;;
 stop&lt;span class="o"&gt;)&lt;/span&gt;
  stop
  ;;
 restart&lt;span class="o"&gt;)&lt;/span&gt;
  stop
  start
  ;;
 status&lt;span class="o"&gt;)&lt;/span&gt;
  status &lt;span class="nv"&gt;$mongod&lt;/span&gt;
  &lt;span class="nv"&gt;RETVAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;
  ;;
 *&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;$&amp;quot;Usage: $0 {start|stop|restart|status}&amp;quot;&lt;/span&gt;
  &lt;span class="nv"&gt;RETVAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="k"&gt;esac&lt;/span&gt;

&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="nv"&gt;$RETVAL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, I opened my Iptables firewall's &lt;code&gt;INPUT&lt;/code&gt; chain so that port 27017 (the port MongoDB server is listening to) is not blocked: I opened the file &lt;code&gt;/etc/sysconfig/iptables&lt;/code&gt; and added the following rule before of the &lt;code&gt;COMMIT&lt;/code&gt; statement:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-A INPUT -p tcp -m tcp -m multiport --ports 27017 -j ACCEPT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and restarted iptables with:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; service iptables restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it. Finally, I started the server instance with:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; service mongodb start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and tested the whole thing opening the Mongo Javascript shell like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /opt/mongodb-2.0.3/bin
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; ./mongo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and everything was fine.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">csparpa</dc:creator><pubDate>Sun, 18 Mar 2012 01:00:00 +0100</pubDate><guid>tag:csparpa.github.io,2012-03-18:blog/2012/03/how-to-install-mongodb-on-fedora.html</guid><category>Linux</category><category>NoSQL</category><category>MongoDB</category><category>database</category><category>Fedora</category></item><item><title>My first impact on Windows 8</title><link>http://csparpa.github.io/blog/2012/03/my-first-impact-on-windows-8.html</link><description>&lt;p&gt;I’ve just tried to install the Windows 8 Consumer Preview ISO image on VMware Player...  &lt;/p&gt;
&lt;p&gt;...and that’s the result... :-S  &lt;/p&gt;
&lt;p&gt;&lt;img alt="My first impact on Windows 8" src="/blog/img/blue-screen-win8.png" title="Windows 8 BSoD" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">csparpa</dc:creator><pubDate>Thu, 01 Mar 2012 01:00:00 +0100</pubDate><guid>tag:csparpa.github.io,2012-03-01:blog/2012/03/my-first-impact-on-windows-8.html</guid><category>software</category><category>VMWare</category><category>humour</category><category>Windows</category></item><item><title>How to change Linux shell login message</title><link>http://csparpa.github.io/blog/2012/02/how-to-change-linux-shell-login-message.html</link><description>&lt;p&gt;Your wish is to change that ugly message which is always appearing when you log into a shell (eg: bash) on your Linux system?  &lt;/p&gt;
&lt;p&gt;Then, edit this file:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/etc/motd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and everything you put into it will appear just after logging in.  &lt;/p&gt;
&lt;p&gt;In order to disable login messages, simply make sure to add to file &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; the following line: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;PrintMotd no
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The login message can also be dynamically generated... and in fact that's what actually happens in many systems (eg: my Ubuntu distro shows how many packages updates are available for downloading into the shell login message).&lt;br /&gt;
In order to create dynamic login messages, I suggest to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;prepare a shell script that echoes the desired content for the login message&lt;/li&gt;
&lt;li&gt;disable &lt;code&gt;motd&lt;/code&gt; file printing at login&lt;/li&gt;
&lt;li&gt;launch your script at any login by adding the its command-line to the &lt;code&gt;/etc/profile&lt;/code&gt; script, which is a system-wide startup script&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">csparpa</dc:creator><pubDate>Fri, 03 Feb 2012 01:00:00 +0100</pubDate><guid>tag:csparpa.github.io,2012-02-03:blog/2012/02/how-to-change-linux-shell-login-message.html</guid><category>Linux</category><category>shell</category></item><item><title>Hungry sudoers</title><link>http://csparpa.github.io/blog/2011/12/hungry-sudoers.html</link><description>&lt;p&gt;&lt;img alt="Hungry sudoers" src="/blog/img/hungry-sudoers.png" title="Hungry sudoers" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">csparpa</dc:creator><pubDate>Sun, 04 Dec 2011 01:00:00 +0100</pubDate><guid>tag:csparpa.github.io,2011-12-04:blog/2011/12/hungry-sudoers.html</guid><category>software</category><category>Linux</category><category>humour</category></item><item><title>Linux paths manipulation</title><link>http://csparpa.github.io/blog/2011/10/linux-paths-manipulation.html</link><description>&lt;p&gt;Sometimes – when geeking around in Linux – you need to play with things like filenames, paths and so on. Here's a quick reference that uses &lt;em&gt;readlink&lt;/em&gt;, &lt;em&gt;basename&lt;/em&gt; and &lt;em&gt;dirname&lt;/em&gt; commands.  &lt;/p&gt;
&lt;p&gt;You have a folder structure like, say:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/opt/
   |_ goofy.txt
   |_ test/
       |_ mickey.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, let's get inside:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /opt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and let's start playing:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# ABSOLUTE PATHS &lt;/span&gt;
&lt;span class="c"&gt;# Get absolute path of goofy.txt&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; readlink -f goofy.txt          &lt;span class="c"&gt;# Gives: /opt/goofy.txt&lt;/span&gt;
&lt;span class="c"&gt;# ...and of mickey.txt&lt;/span&gt;
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; readlink -f &lt;span class="nb"&gt;test&lt;/span&gt;/mickey.txt    &lt;span class="c"&gt;# Gives: /opt/test/mickey.txt&lt;/span&gt;

&lt;span class="c"&gt;# FILENAMES &lt;/span&gt;
&lt;span class="c"&gt;# Get filename for mickey.txt without extension&lt;/span&gt;
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; basename &lt;span class="nb"&gt;test&lt;/span&gt;/mickey.txt .txt    &lt;span class="c"&gt;# Gives: mickey&lt;/span&gt;

&lt;span class="c"&gt;# BASE DIRECTORIES &lt;/span&gt;
&lt;span class="c"&gt;# Get base directory relatively to the current directory&lt;/span&gt;
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; dirname goofy.txt          &lt;span class="c"&gt;# Gives: .&lt;/span&gt;
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; dirname &lt;span class="nb"&gt;test&lt;/span&gt;/mickey.txt    &lt;span class="c"&gt;# Gives: test&lt;/span&gt;
&lt;span class="c"&gt;#...and then absolutely&lt;/span&gt;
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; dirname &lt;span class="s2"&gt;&amp;quot;$(readlink -f goofy.txt)&amp;quot;&lt;/span&gt;        &lt;span class="c"&gt;# Gives: /opt&lt;/span&gt;
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; dirname &lt;span class="s2"&gt;&amp;quot;$(readlink -f test/mickey.txt)&amp;quot;&lt;/span&gt;  &lt;span class="c"&gt;# Gives: /opt/test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, it's just... for playing :-)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">csparpa</dc:creator><pubDate>Tue, 25 Oct 2011 01:00:00 +0200</pubDate><guid>tag:csparpa.github.io,2011-10-25:blog/2011/10/linux-paths-manipulation.html</guid><category>Linux</category><category>shell</category></item></channel></rss>